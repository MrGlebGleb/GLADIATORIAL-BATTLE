// --- ARENA BONUSES LOGIC ---

/**
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–µ.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –∏–≥—Ä–æ–≤–æ–º —Ç–∏–∫–µ.
 */
function manageArenaBonuses() {
    if (arenaBonuses.length < MAX_ARENA_BONUSES) {
        const randomChance = Math.random();
        // –®–∞–Ω—Å—ã –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —á–∞—Å—Ç–æ—Ç—ã —Ç–∏–∫–æ–≤, —á—Ç–æ–±—ã –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç GAME_SPEED
        const tickRateFactor = 1000 / GAME_SPEED; // –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏–º–µ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∏–∫

        if (randomChance < (ELITE_WEAPON_BONUS_CHANCE / tickRateFactor) ) {
            spawnArenaBonus('elite_weapon');
        } else if (randomChance < ((ELITE_WEAPON_BONUS_CHANCE + HEALTH_PACK_BONUS_CHANCE) / tickRateFactor) ) {
            spawnArenaBonus('health_pack');
        } else if (randomChance < ((ELITE_WEAPON_BONUS_CHANCE + HEALTH_PACK_BONUS_CHANCE + ARMOR_PACK_LIGHT_CHANCE) / tickRateFactor) ) {
            spawnArenaBonus('armor_light');
        } else if (randomChance < ((ELITE_WEAPON_BONUS_CHANCE + HEALTH_PACK_BONUS_CHANCE + ARMOR_PACK_LIGHT_CHANCE + ARMOR_PACK_HEAVY_CHANCE) / tickRateFactor) ) {
            spawnArenaBonus('armor_heavy');
        }
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –±–æ–Ω—É—Å –Ω–∞ –∞—Ä–µ–Ω–µ.
 * @param {string} type - –¢–∏–ø –±–æ–Ω—É—Å–∞ ('elite_weapon', 'health_pack', 'armor_light', 'armor_heavy').
 */
function spawnArenaBonus(type) {
    if (arenaBonuses.length >= MAX_ARENA_BONUSES || !arenaEl) return;

    const bonus = {
        id: `bonus-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
        type: type,
        x: getRandomInt(30, ARENA_WIDTH - 30),
        y: getRandomInt(30, ARENA_HEIGHT - 30),
        element: document.createElement('div')
    };
    bonus.element.classList.add('arena-bonus');

    if (type === 'health_pack') {
        bonus.element.classList.add('health-pack');
        bonus.element.textContent = '‚ûï';
        bonus.element.title = "–ê–ø—Ç–µ—á–∫–∞ (+50 –û–ó)";
        bonus.value = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è
    } else if (type === 'elite_weapon') {
        bonus.element.classList.add('elite-weapon-pickup');
        const eliteWeaponSample = ELITE_WEAPONS[getRandomInt(0, ELITE_WEAPONS.length - 1)];
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω —Å–æ—Å—Ç–∞–≤–Ω–æ–π
        bonus.element.textContent = eliteWeaponSample.emoji.length > 1 && eliteWeaponSample.emoji.includes("Ô∏è") ? eliteWeaponSample.emoji.substring(0, eliteWeaponSample.emoji.indexOf("Ô∏è")) : eliteWeaponSample.emoji.substring(0,1);
        bonus.element.title = `–≠–ª–∏—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ: ${eliteWeaponSample.name}`;
        bonus.weapon = deepCopy(eliteWeaponSample); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç
    } else if (type === 'armor_light') {
        bonus.element.classList.add('armor-pack');
        bonus.element.textContent = 'üõ°Ô∏è';
        bonus.element.title = `–õ–µ–≥–∫–∞—è –ë—Ä–æ–Ω—è (${MAX_ARMOR_HITS_LIGHT} –±–ª–æ–∫–∞)`;
        bonus.hits = MAX_ARMOR_HITS_LIGHT;
    } else if (type === 'armor_heavy') {
        bonus.element.classList.add('armor-pack');
        bonus.element.textContent = 'üí†'; // –î—Ä—É–≥–æ–π –∑–Ω–∞—á–æ–∫ –¥–ª—è —Ç—è–∂–µ–ª–æ–π –±—Ä–æ–Ω–∏
        bonus.element.title = `–¢—è–∂–µ–ª–∞—è –ë—Ä–æ–Ω—è (${MAX_ARMOR_HITS_HEAVY} –±–ª–æ–∫–∞)`;
        bonus.hits = MAX_ARMOR_HITS_HEAVY;
    }

    bonus.element.style.left = `${bonus.x - 20}px`; // 20 - –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã/–≤—ã—Å–æ—Ç—ã –±–æ–Ω—É—Å–∞
    bonus.element.style.top = `${bonus.y - 20}px`;
    arenaEl.appendChild(bonus.element);
    arenaBonuses.push(bonus);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–±–æ—Ä –±–æ–Ω—É—Å–∞ –±–æ–π—Ü–æ–º.
 * @param {object} fighter - –ë–æ–µ—Ü, –ø–æ–¥–æ–±—Ä–∞–≤—à–∏–π –±–æ–Ω—É—Å.
 * @param {object} bonus - –û–±—ä–µ–∫—Ç –±–æ–Ω—É—Å–∞.
 */
function collectBonus(fighter, bonus) {
    if (!fighter || !bonus || !bonus.element) return;

    logIntellectAction(fighter, 'resource', `–ø–æ–¥–±–∏—Ä–∞–µ—Ç ${bonus.element.title.split(':')[0]}`);
    addExperience(fighter, 'pickup_bonus');
    fighter.bonusesCollectedThisRound = (fighter.bonusesCollectedThisRound || 0) + 1;

    showPickupAura(fighter, bonus.type); // UI —ç—Ñ—Ñ–µ–∫—Ç

    if (bonus.type === 'health_pack' && bonus.value) {
        fighter.health = Math.min(fighter.maxHealth, fighter.health + bonus.value);
        logMessage(`${fighter.name} <span class="log-bonus">–∏—Å—Ü–µ–ª—è–µ—Ç—Å—è –Ω–∞ ${bonus.value} –û–ó</span> –æ—Ç –∞–ø—Ç–µ—á–∫–∏!`, "log-bonus");
    } else if (bonus.type === 'elite_weapon' && bonus.weapon) {
        fighter.weapon = deepCopy(bonus.weapon); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
        fighter.weapon.currentRange = fighter.weapon.range; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞–ª—å–Ω–æ—Å—Ç—å
        logMessage(`${fighter.name} <span class="log-elite-weapon">–ø–æ–¥–±–∏—Ä–∞–µ—Ç –≠–ª–∏—Ç–Ω–æ–µ –û—Ä—É–∂–∏–µ: ${fighter.weapon.name} ${fighter.weapon.emoji}</span>!`, "log-elite-weapon");
        if (fighter.element) {
            const weaponEmojiEl = fighter.element.querySelector('.weapon-emoji');
            if (weaponEmojiEl) weaponEmojiEl.textContent = fighter.weapon.emoji;
        }
    } else if ((bonus.type === 'armor_light' || bonus.type === 'armor_heavy') && bonus.hits) {
        fighter.armorHits = bonus.hits;
        if (activeRoundModifier && activeRoundModifier.name === "–•—Ä—É–ø–∫–∞—è –ë—Ä–æ–Ω—è") {
            fighter.armorHits = Math.max(0, fighter.armorHits - 1);
            if (fighter.armorHits < bonus.hits) {
                 logMessage(`–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä "–•—Ä—É–ø–∫–∞—è –ë—Ä–æ–Ω—è" —É–º–µ–Ω—å—à–∞–µ—Ç –ø—Ä–æ—á–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏ ${fighter.name}!`, "log-modifier");
            }
        }
        fighter.maxArmorHits = bonus.hits; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–æ—Å–∫–∏
        fighter.hasArmor = fighter.armorHits > 0;
        logMessage(`${fighter.name} <span class="log-armor">–Ω–∞–¥–µ–≤–∞–µ—Ç ${bonus.element.title}</span>! (${fighter.armorHits} –±–ª–æ–∫–æ–≤)`, "log-armor");
    }

    if (bonus.element.parentElement) {
        bonus.element.remove();
    }
    arenaBonuses = arenaBonuses.filter(b => b.id !== bonus.id);
    updateFighterElement(fighter);
}