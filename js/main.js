// --- MAIN SCRIPT (INITIALIZATION) ---

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π.
 */
function initGame() {
    console.log("initGame: Starting initialization...");

    document.title = "–ê—Ä–µ–Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤";
    if (h1TitleEl) {
        h1TitleEl.textContent = `–ê—Ä–µ–Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤`;
    } else {
        console.error("initGame: h1TitleEl not found!");
    }

    // --- –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π ---
    if (startButtonEl) {
        startButtonEl.addEventListener('click', () => {
            console.log("startButtonEl clicked. isGameOver:", isGameOver, "firstRoundStarted:", firstRoundStarted, "roundInProgress:", roundInProgress);
            if (isGameOver) return; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è isGameOver
            if ((!firstRoundStarted && !roundInProgress) ||
                startButtonEl.textContent === '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –±–æ–π—Ü–æ–≤!' ||
                startButtonEl.textContent === '–û—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å?') {
                firstRoundStarted = true;
                startButtonEl.textContent = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...';
                startButtonEl.disabled = true;
                if (restartRoundButtonEl) restartRoundButtonEl.style.display = 'none';
                setupNewRound(false);
            }
        });
    } else {
        console.error("initGame: startButtonEl not found!");
    }

    if (restartRoundButtonEl) {
        restartRoundButtonEl.addEventListener('click', () => {
            console.log("restartRoundButtonEl clicked. firstRoundStarted:", firstRoundStarted, "isGameOver:", isGameOver);
            if (!firstRoundStarted && !isGameOver) { // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è isGameOver
                 alert("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É!");
                 return;
            }
            if (confirm("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥? –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—É–Ω–¥–∞ (–æ–ø—ã—Ç, —Å—Ç–∞–≤–∫–∏) –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.")) {
                logMessage("üèÅ <span class='log-stall-restart'>–†–∞—É–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é...</span>", "log-stall-restart");
                endRound(true);
            }
        });
    } else {
         console.warn("initGame: restartRoundButtonEl not found or initially hidden.");
    }

    // --- –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫ ---
     if (placeBetButtonEl) {
        placeBetButtonEl.addEventListener('click', () => {
            console.log("placeBetButtonEl clicked.");
            if (isGameOver || roundInProgress) return; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è isGameOver
            const participatingCount = fightersInitialData.filter(f => f.participating).length;
            if (fightersInitialData.length !== participatingCount || participatingCount < 2) {
                 alert("–°—Ç–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Å–µ –±–æ–π—Ü—ã —É—á–∞—Å—Ç–≤—É—é—Ç –∏ –∏—Ö –º–∏–Ω–∏–º—É–º –¥–≤–æ–µ.");
                 placeBetButtonEl.style.display = 'none';
                 return;
            }
            isBettingPaused = true;
            if (preRoundTimeoutId) clearTimeout(preRoundTimeoutId);
            if (betFighterSelectEl) betFighterSelectEl.innerHTML = '';
            const aliveBetTargets = currentFighters ? currentFighters.filter(f => f.alive) : [];
            aliveBetTargets.forEach(f => {
                const option = document.createElement('option');
                option.value = f.id;
                let intellectInfo = "";
                const totalInt = getTotalIntellect(f);
                 if (totalInt > 4) {
                    intellectInfo = ` (${INTELLECT_SYMBOLS.tactical}${f.combatStats?.intellect?.tactical || 1}, ${INTELLECT_SYMBOLS.defense}${f.combatStats?.intellect?.defense || 1}, ${INTELLECT_SYMBOLS.resource}${f.combatStats?.intellect?.resource || 1}, ${INTELLECT_SYMBOLS.spatial}${f.combatStats?.intellect?.spatial || 1})`;
                }
                option.textContent = f.name + intellectInfo;
                if (betFighterSelectEl) betFighterSelectEl.appendChild(option);
            });
            if (betAmountInputEl) { betAmountInputEl.value = ''; betAmountInputEl.max = playerGold; } // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è playerGold
            if (betErrorMessageEl) betErrorMessageEl.textContent = '';
            updatePlayerGoldDisplay(); // –ö–æ—Å–≤–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç playerGold
            if (bettingModalEl) bettingModalEl.style.display = 'flex';
        });
    } else {
        console.error("initGame: placeBetButtonEl not found!");
    }

    if (confirmBetButtonEl) {
         confirmBetButtonEl.addEventListener('click', () => {
            console.log("confirmBetButtonEl clicked.");
             if (isGameOver) return; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è isGameOver
             const selectedFighterId = betFighterSelectEl.value;
             const betAmount = parseInt(betAmountInputEl.value);
             if (betErrorMessageEl) betErrorMessageEl.textContent = '';
             if (!selectedFighterId) { if (betErrorMessageEl) betErrorMessageEl.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–π—Ü–∞.'; return; }
             if (isNaN(betAmount) || betAmount <= 0) { if (betErrorMessageEl) betErrorMessageEl.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.'; return; }
             if (betAmount > playerGold) { if (betErrorMessageEl) betErrorMessageEl.textContent = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.'; return; } // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è playerGold
             currentBet.fighterId = selectedFighterId;
             currentBet.amount = betAmount;
             currentBet.placed = true;
             playerGold -= betAmount; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è playerGold
             updatePlayerGoldDisplay();
             const fighterBetOn = currentFighters?.find(f => f.id === selectedFighterId);
             logMessage(`üí∞ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${betAmount.toLocaleString()} –∑–æ–ª–æ—Ç–∞ –Ω–∞ <span class="log-winner">${fighterBetOn ? fighterBetOn.name : '–±–æ–π—Ü–∞'}</span>!`);
             if (bettingModalEl) bettingModalEl.style.display = 'none';
             isBettingPaused = false;
             proceedToRoundStart();
          });
     } else { console.error("initGame: confirmBetButtonEl not found!"); }

      if (skipBetButtonEl) {
         skipBetButtonEl.addEventListener('click', () => {
             console.log("skipBetButtonEl clicked.");
             if (isGameOver) return; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è isGameOver
             if (bettingModalEl) bettingModalEl.style.display = 'none';
             isBettingPaused = false;
             proceedToRoundStart();
          });
     } else { console.error("initGame: skipBetButtonEl not found!"); }

    // --- –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∑–µ–º–ª–∏ ---
    if (buyLandButtonEl) {
        buyLandButtonEl.addEventListener('click', () => {
            console.log("buyLandButtonEl clicked.");
            if (playerGold >= WIN_AMOUNT_FOR_LAND && !isGameOver) { // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è playerGold –∏ isGameOver
                playerGold -= WIN_AMOUNT_FOR_LAND; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è playerGold
                updatePlayerGoldDisplay();
                isGameOver = true; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è isGameOver
                if (gameLoopInterval) clearInterval(gameLoopInterval);
                if (preRoundTimeoutId) clearTimeout(preRoundTimeoutId);
                roundInProgress = false;
                if (startButtonEl) { startButtonEl.disabled = true; startButtonEl.textContent = "–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê"; }
                if (restartRoundButtonEl) restartRoundButtonEl.style.display = 'none';
                if (roundInfoOverlayEl) roundInfoOverlayEl.style.display = 'none';
                if (bettingModalEl) bettingModalEl.style.display = 'none';
                if (arenaEl) arenaEl.innerHTML = '<p style="text-align:center; font-size: 3em; color: var(--warning-color); margin-top: 200px;">üëë –í—ã –ë–æ–≥! üëë</p>';
                if (battleLogEl) battleLogEl.innerHTML = '';
                logMessage(`–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –ü–û–¢–†–ê–¢–ò–õ–ò ${WIN_AMOUNT_FOR_LAND.toLocaleString()} üí∞, –ö–£–ü–ò–õ–ò –ó–ï–ú–õ–Æ –ò –°–¢–ê–õ–ò –ë–û–ì–û–ú!`, "log-winner");
                if (gameOverOverlayEl) gameOverOverlayEl.style.display = 'flex';
                updateScoreboard();
            } else if (!isGameOver) { // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è isGameOver
                alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ ${WIN_AMOUNT_FOR_LAND.toLocaleString()} üí∞.`);
            }
        });
    } else {
        console.error("initGame: buyLandButtonEl not found!");
    }

    // --- –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–æ–º –ª–æ–≥–∞ ---
    if (battleLogEl) {
        battleLogEl.addEventListener('wheel', () => {
            if (!scrollLogDownButtonEl) return;
            setTimeout(() => {
                 if (battleLogEl.scrollTop + battleLogEl.clientHeight < battleLogEl.scrollHeight - 15) {
                    userScrolledLog = true;
                    scrollLogDownButtonEl.style.opacity = '0.8';
                } else {
                     userScrolledLog = false;
                     scrollLogDownButtonEl.style.opacity = '0';
                }
            }, 50);
        });
         battleLogEl.addEventListener('scroll', () => {
             if (!scrollLogDownButtonEl) return;
            if (battleLogEl.scrollTop + battleLogEl.clientHeight < battleLogEl.scrollHeight - 15) {
                 if (!userScrolledLog) {
                     userScrolledLog = true;
                     scrollLogDownButtonEl.style.opacity = '0.8';
                 }
            } else {
                 userScrolledLog = false;
                 scrollLogDownButtonEl.style.opacity = '0';
            }
         });
    } else {
        console.error("initGame: battleLogEl not found!");
    }

    if (scrollLogDownButtonEl) {
        scrollLogDownButtonEl.addEventListener('click', () => {
            if (battleLogEl) {
                battleLogEl.scrollTop = battleLogEl.scrollHeight;
                userScrolledLog = false;
                scrollLogDownButtonEl.style.opacity = '0';
            }
        });
    } else {
        console.error("initGame: scrollLogDownButtonEl not found!");
    }


    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UI
    console.log("initGame: Calling initial UI updates...");
    try {
        updateScoreboard();
        updatePlayerGoldDisplay();
        logMessage("–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ç–≤—ã...");
        logMessage("üîÆ <span class='log-modifier'>–ù–æ–≤–∏–Ω–∫–∞! –í–æ–∫—Ä—É–≥ –∞—Ä–µ–Ω—ã –ø–æ—è–≤–∏–ª–∏—Å—å –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã! –ö–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –Ω–∏—Ö –≤–æ –≤—Ä–µ–º—è –±–æ—è!</span>", "log-modifier");
        logMessage("üß† <span class='log-winner'>–ì–ª–∞–¥–∏–∞—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –æ–±–ª–∞–¥–∞—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –±—É–¥—É—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–º–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –±–æ–µ–º!</span>", "log-winner");
        logMessage("üõ°Ô∏è <span class='log-armor'>–ù–∞ –∞—Ä–µ–Ω–µ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –±—Ä–æ–Ω—è!</span>", "log-armor");
    } catch (error) {
        console.error("initGame: Error during initial UI updates:", error);
    }

    console.log("initGame: Initialization finished.");
}

// --- –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOMContentLoaded event fired.");
    initGame();
});