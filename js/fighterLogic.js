// --- FIGHTER LOGIC ---

var createFighterInstanceNamespace = {
    commonWeaponThisRound: null
};

function createFighterInstance(baseFighterData) {
    const dataCopy = deepCopy(baseFighterData);
    let weapon;

    // –õ–æ–≥–∏–∫–∞ –æ–±—â–µ–≥–æ –æ—Ä—É–∂–∏—è –¥–ª—è —Å–ø–µ—Ü-—Ä–∞—É–Ω–¥–æ–≤
    if (roundCounter > 0 && roundCounter % 5 === 0) {
        if (!createFighterInstanceNamespace.commonWeaponThisRound) {
            createFighterInstanceNamespace.commonWeaponThisRound = deepCopy(WEAPONS[getRandomInt(0, WEAPONS.length - 1)]);
        }
        weapon = deepCopy(createFighterInstanceNamespace.commonWeaponThisRound);
    } else {
         weapon = deepCopy(WEAPONS[getRandomInt(0, WEAPONS.length - 1)]);
    }
    weapon.currentRange = weapon.range; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–∫—É—â—É—é –¥–∞–ª—å–Ω–æ—Å—Ç—å

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ combatStats
    if (!dataCopy.combatStats.intellect) {
        dataCopy.combatStats.intellect = { tactical: 1, defense: 1, resource: 1, spatial: 1 };
    }
    if (!dataCopy.combatStats.experience) {
        dataCopy.combatStats.experience = { tactical: 0, defense: 0, resource: 0, spatial: 0 };
    }
    if (!dataCopy.combatStats.learning) {
        dataCopy.combatStats.learning = { weaponEffectiveness: {}, targetPriorities: {}, dangerousEnemies: {}, optimalDistances: {}, successfulPatterns: [] };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ–π—Ü–∞
    const fighter = {
        ...dataCopy,
        health: BASE_HEALTH,
        maxHealth: BASE_HEALTH,
        baseSpeed: getRandomInt(15, 25), // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        speed: 0, // –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ
        weapon: weapon,
        x: getRandomInt(FIGHTER_WIDTH / 2, ARENA_WIDTH - FIGHTER_WIDTH / 2),
        y: getRandomInt(FIGHTER_HEIGHT / 2, ARENA_HEIGHT - FIGHTER_HEIGHT / 2),
        alive: true,
        element: null, // DOM —ç–ª–µ–º–µ–Ω—Ç
        target: null, // –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å (–±–æ–µ—Ü –∏–ª–∏ –±–æ–Ω—É—Å)
        actionCooldown: 0, // –ö—É–ª–¥–∞—É–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        statusEffects: {}, // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        damageOutputMultiplier: 1, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —É—Ä–æ–Ω–∞
        damageTakenMultiplier: 1, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ —É—Ä–æ–Ω–∞
        critDamageTakenMultiplier: 1, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞
        evasionChance: 0.05 + (dataCopy.combatStats.intellect.defense * 0.005), // –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è
        currentAction: null, // –¢–µ–∫—É—â–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        actionProgress: 0, // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å)
        lastDamagedBy: null, // ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ç–∞–∫–æ–≤–∞–≤—à–µ–≥–æ
        damageDealtThisRound: 0,
        killsThisRound: 0,
        bonusesCollectedThisRound: 0,
        ticksSurvivedThisRound: 0,
        armorHits: 0, // –¢–µ–∫—É—â–∏–µ –∑–∞—Ä—è–¥—ã –±—Ä–æ–Ω–∏
        maxArmorHits: 0, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–∞—Ä—è–¥—ã –±—Ä–æ–Ω–∏ (–¥–ª—è UI)
        hasArmor: false, // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –±—Ä–æ–Ω–∏
        initialExpThisRound: deepCopy(dataCopy.combatStats.experience), // –û–ø—ã—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞

        // --- –§–ª–∞–≥–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ ---
        isInvulnerable: false, // –§–ª–∞–≥ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ (oe_invulnerability_short)
        canNullifyCrit: false, // –§–ª–∞–≥ –¥–ª—è –∞–Ω—Ç–∏-–∫—Ä–∏—Ç —â–∏—Ç–∞ (oe_crit_nullification)
        actionCooldownMultiplier: 1, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫—É–ª–¥–∞—É–Ω–æ–≤ (oe_temporal_acceleration / oe_increased_cooldowns_short)
        pickupRadiusFactor: 1, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–¥–∏—É—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –±–æ–Ω—É—Å–æ–≤ (oe_bonus_attraction_field)
        projectileSpeedFactor: 1, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–Ω–∞—Ä—è–¥–æ–≤ (oe_projectile_friction / –≤–æ–∑–º–æ–∂–Ω–æ, –±—É–¥—É—â–∏–µ –±–∞—Ñ—Ñ—ã)
        kineticBarrierActive: null, // –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –±–∞—Ä—å–µ—Ä–∞ (oe_kinetic_barrier)
        reactiveArmorCharge: null, // –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏ (oe_reactive_armor_charge)
        vulnerabilityBonusNextHit: 1, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏ –ø–æ —ç—Ç–æ–π —Ü–µ–ª–∏ (oe_reveal_enemy_weakness)
    };
    fighter.speed = fighter.baseSpeed; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–≤–Ω–æ–π –±–∞–∑–æ–≤–æ–π
    return fighter;
}


function addExperience(fighter, eventTypeKey, baseAmountMultiplier = 1) {
    if (!fighter || !fighter.alive || !fighter.combatStats || !fighter.combatStats.experience || !fighter.combatStats.intellect) return;

    const rewardsForEvent = EXPERIENCE_REWARDS[eventTypeKey];

    // –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
    if (eventTypeKey.startsWith('orbital_xp_')) {
         const intellectType = eventTypeKey.replace('orbital_xp_', '');
         if (fighter.combatStats.intellect[intellectType] >= MAX_INTELLECT_LEVEL) return;

         fighter.combatStats.experience[intellectType] = (fighter.combatStats.experience[intellectType] || 0) + baseAmountMultiplier;
         const expNeeded = getExpToLevelUp(fighter.combatStats.intellect[intellectType]);

         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
         while (fighter.combatStats.experience[intellectType] >= expNeeded && fighter.combatStats.intellect[intellectType] < MAX_INTELLECT_LEVEL) {
            fighter.combatStats.intellect[intellectType]++;
            fighter.combatStats.experience[intellectType] -= expNeeded; // –í—ã—á–∏—Ç–∞–µ–º –æ–ø—ã—Ç –∑–∞ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å
            logMessage(`üß† <span class="log-int-levelup">${fighter.name} –ø–æ–≤—ã—Å–∏–ª ${intellectType} –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–æ ${fighter.combatStats.intellect[intellectType]}!</span> (–û—Ä–±–∏—Ç–∞)`, "log-int-levelup");
            updateFighterIntellectVisuals(fighter);
            showIntellectLevelUpSparkle(fighter);
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–ª—è *—Å–ª–µ–¥—É—é—â–µ–≥–æ* —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞–±—Ä–∞–ª–æ—Å—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
             if (fighter.combatStats.intellect[intellectType] < MAX_INTELLECT_LEVEL) {
                 // expNeeded = getExpToLevelUp(fighter.combatStats.intellect[intellectType]);
                 // –û—à–∏–±–∫–∞ –≤ –ø—Ä–µ–¥. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å expNeeded –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ level up
             } else {
                 fighter.combatStats.experience[intellectType] = 0; // –û–±–Ω—É–ª—è–µ–º –æ–ø—ã—Ç –Ω–∞ –º–∞–∫—Å —É—Ä–æ–≤–Ω–µ
             }
         }
         updateScoreboard(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–≤—ã—à–µ–Ω–∏–π
         return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—ã–ª–æ –ø—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    }

    if (!rewardsForEvent) return; // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥–∞—Ö

    let gainedAnyExp = false;
    for (const intellectType in rewardsForEvent) {
        if (fighter.combatStats.intellect[intellectType] >= MAX_INTELLECT_LEVEL) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫–∞—á–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç

        const amount = (rewardsForEvent[intellectType] || 0) * baseAmountMultiplier;
        if (amount === 0) continue;

        fighter.combatStats.experience[intellectType] = (fighter.combatStats.experience[intellectType] || 0) + amount;
        gainedAnyExp = true;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –∑–∞ —Ä–∞–∑)
        let expNeeded = getExpToLevelUp(fighter.combatStats.intellect[intellectType]);
        while (fighter.combatStats.experience[intellectType] >= expNeeded && fighter.combatStats.intellect[intellectType] < MAX_INTELLECT_LEVEL) {
            fighter.combatStats.intellect[intellectType]++;
            fighter.combatStats.experience[intellectType] -= expNeeded;
            logMessage(`üß† <span class="log-int-levelup">${fighter.name} –ø–æ–≤—ã—Å–∏–ª ${intellectType} –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–æ ${fighter.combatStats.intellect[intellectType]}!</span> (<span class="log-int-${intellectType}">${INTELLECT_SYMBOLS[intellectType]}</span>)`, "log-int-levelup");
            updateFighterIntellectVisuals(fighter);
            showIntellectLevelUpSparkle(fighter);
            // –û–±–Ω–æ–≤–ª—è–µ–º expNeeded –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if (fighter.combatStats.intellect[intellectType] < MAX_INTELLECT_LEVEL) {
                 expNeeded = getExpToLevelUp(fighter.combatStats.intellect[intellectType]);
            } else {
                fighter.combatStats.experience[intellectType] = 0; // –û–±–Ω—É–ª—è–µ–º –æ–ø—ã—Ç –Ω–∞ –º–∞–∫—Å —É—Ä–æ–≤–Ω–µ
            }
        }
    }
    if (gainedAnyExp) {
        updateScoreboard(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –æ–ø—ã—Ç
    }
}

function processRoundExperience() {
    const winner = currentFighters.find(f => f.alive);

    currentFighters.forEach(fighter => {
        // –ï—Å–ª–∏ initialExpThisRound –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if (fighter.initialExpThisRound === undefined && fighter.combatStats && fighter.combatStats.experience) {
             fighter.initialExpThisRound = deepCopy(fighter.combatStats.experience);
        }

        // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
        addExperience(fighter, 'participation');
        addExperience(fighter, 'survive_round_tick', fighter.ticksSurvivedThisRound);

        // –û–ø—ã—Ç –∑–∞ —É—Ä–æ–Ω
        if (fighter.damageDealtThisRound > 0) {
            addExperience(fighter, 'damage_dealt_ratio', (fighter.damageDealtThisRound / BASE_HEALTH));
        }

        // –û–ø—ã—Ç –∑–∞ –º–µ—Å—Ç–æ –≤ —Ä–∞—É–Ω–¥–µ
        if (winner) { // –ï—Å—Ç—å —è–≤–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            if (fighter.id === winner.id) addExperience(fighter, 'win_round');
            else if (defeatedFightersOrder.length > 0 && defeatedFightersOrder[defeatedFightersOrder.length - 1] === fighter.id) addExperience(fighter, 'place_2nd');
            else if (defeatedFightersOrder.length > 1 && defeatedFightersOrder[defeatedFightersOrder.length - 2] === fighter.id) addExperience(fighter, 'place_3rd');
        } else { // –ù–∏—á—å—è –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏—Å—Ö–æ–¥
            // –ï—Å–ª–∏ –≤—Å–µ –ø–∞–ª–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤—ã–±—ã–≤–∞–Ω–∏—è
            if (defeatedFightersOrder.length === currentFighters.length) {
                 if (defeatedFightersOrder.length >=1 && defeatedFightersOrder[defeatedFightersOrder.length - 1] === fighter.id) addExperience(fighter, 'win_round'); // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∂–∏–≤—à–∏–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
                 else if (defeatedFightersOrder.length >=2 && defeatedFightersOrder[defeatedFightersOrder.length - 2] === fighter.id) addExperience(fighter, 'place_2nd');
                 else if (defeatedFightersOrder.length >=3 && defeatedFightersOrder[defeatedFightersOrder.length - 3] === fighter.id) addExperience(fighter, 'place_3rd');
            } else { // –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–∞–ª–∏, –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–π–º–∞—É—Ç) - –¥–∞–µ–º –æ–ø—ã—Ç –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞
                 if (fighter.alive) {
                     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ –±–µ–∑ –ø–æ–±–µ–¥—ã
                     addExperience(fighter, 'place_3rd'); // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –∑–∞ 3–µ –º–µ—Å—Ç–æ
                 } else { // –ï—Å–ª–∏ –ø–∞–ª, –Ω–æ –Ω–µ –≤ —Ç–æ–ø-3
                     if (defeatedFightersOrder.length > 0 && defeatedFightersOrder[defeatedFightersOrder.length - 1] === fighter.id) addExperience(fighter, 'place_2nd');
                     else if (defeatedFightersOrder.length > 1 && defeatedFightersOrder[defeatedFightersOrder.length - 2] === fighter.id) addExperience(fighter, 'place_3rd');
                 }
            }
        }
    });
}


function chooseAction(fighter, aliveFighters, bonuses) {
    // –ù–µ –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –±–æ–µ—Ü –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –ø–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
    if (fighter.actionCooldown > 0 || fighter.statusEffects?.stun || fighter.statusEffects?.oe_weapon_jam_effect) return;
    intelliActionLog[fighter.id] = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–∞

    const { intellect, caution, aggression, preferredTargetType, learnedGrudges, learning } = fighter.combatStats;
    let bestAction = { type: 'idle', priority: -1, message: "–±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—Ç" };

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ ---
    // 1. –î–µ–∑–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
    if (fighter.statusEffects?.oe_disorient_movement_effect) {
        const destX = fighter.x + getRandomInt(-2, 2) * fighter.speed;
        const destY = fighter.y + getRandomInt(-2, 2) * fighter.speed;
        fighter.currentAction = { type: 'reposition', destX, destY, priority: 1000, message: `–¥–≤–∏–∂–µ—Ç—Å—è —Ö–∞–æ—Ç–∏—á–Ω–æ (–¥–µ–∑–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è)` };
        logIntellectAction(fighter, 'spatial', `–¥–µ–∑–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω!`);
        return; // –í—ã—Ö–æ–¥, –¥–µ–∑–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ
    }
    // 2. –ó–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    if (fighter.statusEffects?.oe_confusion_effect) {
        const possibleTargetsIncludingSelf = currentFighters.filter(f => f.alive);
        if (possibleTargetsIncludingSelf.length > 0) {
            const randomTarget = possibleTargetsIncludingSelf[getRandomInt(0, possibleTargetsIncludingSelf.length - 1)];
            fighter.target = randomTarget;
            const distToTarget = getDistance(fighter, randomTarget);
            const attackRange = fighter.weapon.currentRange || fighter.weapon.range;
            if (distToTarget <= attackRange) {
                fighter.currentAction = { type: 'attack', target: randomTarget, priority: 100, message: `–∞—Ç–∞–∫—É–µ—Ç ${randomTarget.name} (–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ)` };
            } else {
                 fighter.currentAction = { type: 'move_to_attack', target: randomTarget, priority: 99, message: `–¥–≤–∏–∂–µ—Ç—Å—è –∫ ${randomTarget.name} (–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ)` };
            }
            logIntellectAction(fighter, 'tactical', `–≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ!`);
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞—Ç–∞–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (fighter.statusEffects.oe_confusion_effect.attacksAffected > 0) {
                fighter.statusEffects.oe_confusion_effect.attacksAffected--;
                if (fighter.statusEffects.oe_confusion_effect.attacksAffected <= 0) {
                    const effectConf = fighter.statusEffects.oe_confusion_effect;
                    if (effectConf && typeof effectConf.onRemove === 'function') effectConf.onRemove(fighter, effectConf);
                    delete fighter.statusEffects.oe_confusion_effect;
                }
            }
            return; // –í—ã—Ö–æ–¥, –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        }
    }
    // --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ ---


    // --- –í—ã–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ---
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–æ–≤
    if (bonuses && bonuses.length > 0) {
        let closestBonus = null;
        let minDistToBonus = Infinity;
        const currentPickupRadius = BONUS_PICKUP_RADIUS * (fighter.pickupRadiusFactor || 1); // –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞–≥–Ω–∏—Ç

        bonuses.forEach(b => {
            const d = getDistance(fighter, b);
            if (d < minDistToBonus) {
                minDistToBonus = d;
                closestBonus = b;
            }
        });
        if (closestBonus) {
            let bonusPriority = 10;
            if (closestBonus.type === 'health_pack' && fighter.health < fighter.maxHealth * 0.7) bonusPriority = 60 + (1 - fighter.health / fighter.maxHealth) * 60 + intellect.resource * 6;
            else if (closestBonus.type === 'elite_weapon' && (!fighter.weapon.name.includes("–≠–ª–∏—Ç–Ω–æ–µ") && !ELITE_WEAPONS.some(ew => ew.name === fighter.weapon.name) )) bonusPriority = 50 + intellect.resource * 7;
            else if (closestBonus.type.includes('armor') && (!fighter.hasArmor || fighter.armorHits < (closestBonus.type === 'armor_heavy' ? MAX_ARMOR_HITS_HEAVY : MAX_ARMOR_HITS_LIGHT))) bonusPriority = (closestBonus.type === 'armor_heavy' ? 55 : 45) + intellect.resource * 5;

            if (minDistToBonus < currentPickupRadius * 2.5) bonusPriority += 30;

            if (bonusPriority > bestAction.priority) {
                bestAction = { type: 'pickup', targetBonus: closestBonus, priority: bonusPriority, message: `–∏–¥–µ—Ç –∑–∞ ${closestBonus.element.title.split(':')[0]}` };
            }
        }
    }

    // 2. –í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏/–ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    const potentialTargets = aliveFighters.filter(f => f.id !== fighter.id && f.alive);
    if (potentialTargets.length > 0) {
        let currentTarget = null;
        let highestThreatScore = -Infinity;
        potentialTargets.forEach(pTarget => {
            let score = 0;
            const distToTarget = getDistance(fighter, pTarget);
            if (preferredTargetType === 'closest') score += (ARENA_WIDTH - distToTarget) / 10;
            if (preferredTargetType === 'weakest') score += (pTarget.maxHealth - pTarget.health) + (intellect.tactical * 6) - (pTarget.hasArmor ? 25 : 0);
            if (preferredTargetType === 'highest_threat') {
                score += (getTotalIntellect(pTarget) * 2.5) + (pTarget.wins * 6) + (pTarget.hasArmor ? 12 : 0);
                if (pTarget.target && pTarget.target.id === fighter.id) score += 25;
            }
            score += intellect.tactical * 2.5;
            if (learnedGrudges && learnedGrudges[pTarget.id]) score += learnedGrudges[pTarget.id] * (6 + intellect.tactical);
            if (learning && learning.dangerousEnemies && learning.dangerousEnemies[pTarget.id] && learning.dangerousEnemies[pTarget.id] > fighter.health * 0.15) score += 15 + intellect.tactical * 2.5;
            if (learning && learning.weaponEffectiveness && learning.weaponEffectiveness[pTarget.id] && learning.weaponEffectiveness[pTarget.id] > 0) score += 7 + intellect.tactical;
            score *= (1 + aggression - caution);
            if (pTarget.statusEffects?.oe_marked_for_death_effect || pTarget.statusEffects?.oe_vulnerability_effect) score *= 1.3; // –£—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏

            if (score > highestThreatScore) {
                highestThreatScore = score;
                currentTarget = pTarget;
            }
        });
        if (preferredTargetType === 'random' && potentialTargets.length > 0 && !currentTarget && bestAction.priority < 12) {
            currentTarget = potentialTargets[getRandomInt(0, potentialTargets.length-1)];
        }

        if (currentTarget) {
            fighter.target = currentTarget;
            const distToTarget = getDistance(fighter, currentTarget);
            const attackRange = fighter.weapon.currentRange || fighter.weapon.range;
            if (distToTarget <= attackRange) {
                let attackPriority = 40 + intellect.tactical * 6 + aggression * 30;
                if (currentTarget.health < currentTarget.maxHealth * 0.20 && fighter.health > fighter.maxHealth * 0.10) attackPriority += 45 + aggression * 12;
                if (fighter.health < fighter.maxHealth * 0.25 && caution > aggression * 1.2) attackPriority *= (0.4 - caution * 1.8);
                if (attackPriority > bestAction.priority) {
                   bestAction = { type: 'attack', target: currentTarget, priority: attackPriority, message: `–∞—Ç–∞–∫—É–µ—Ç ${currentTarget.name}` };
                }
            } else {
                let moveAttackPriority = 30 + intellect.spatial * 4 + aggression * 25;
                if (currentTarget.health < currentTarget.maxHealth * 0.20 && fighter.health > fighter.maxHealth * 0.10) moveAttackPriority += 35 + aggression * 7;
                 if (moveAttackPriority > bestAction.priority) {
                    bestAction = { type: 'move_to_attack', target: currentTarget, priority: moveAttackPriority, message: `—Å–±–ª–∏–∂–∞–µ—Ç—Å—è —Å ${currentTarget.name}` };
                }
            }
        }
    }

    // 3. –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    let wantsToRetreat = false;
    let retreatPriority = -1;
    if (fighter.health < fighter.maxHealth * (0.25 + caution * 0.7 - aggression * 0.25 + intellect.defense * 0.04)) wantsToRetreat = true;
    if (fighter.hasArmor && fighter.armorHits > 0 && fighter.health > fighter.maxHealth * 0.12) wantsToRetreat = false;
    if (fighter.target && fighter.target.health < fighter.target.maxHealth * 0.08 && fighter.health > fighter.maxHealth * 0.08) wantsToRetreat = false;
    if (duelContenders && duelContenders.some(dc => dc.id === fighter.id) && fighter.health > fighter.maxHealth * 0.04) wantsToRetreat = false;
    else if (aggression > 0.96 && fighter.health > fighter.maxHealth * 0.02) { if (Math.random() < aggression * 0.95) wantsToRetreat = false; }
    if (wantsToRetreat && potentialTargets.length > 0) {
        let escapeVector = { x: 0, y: 0 };
        let closestThreatDist = Infinity;
        let closestThreat = null;
        let numThreatsConsidered = 0;
        potentialTargets.forEach(pTarget => {
            const dist = getDistance(fighter, pTarget);
            if (dist < (fighter.weapon.range || 100) * 2.2 || (pTarget.target && pTarget.target.id === fighter.id)) {
                numThreatsConsidered++;
                if (dist < closestThreatDist) { closestThreatDist = dist; closestThreat = pTarget; }
                escapeVector.x -= (pTarget.x - fighter.x) / (dist * dist + 1);
                escapeVector.y -= (pTarget.y - fighter.y) / (dist * dist + 1);
            }
        });
        if (numThreatsConsidered > 0) {
            let retreatDestX = fighter.x, retreatDestY = fighter.y;
            const norm = Math.sqrt(escapeVector.x * escapeVector.x + escapeVector.y * escapeVector.y);
            if (norm > 0) { retreatDestX = fighter.x + (escapeVector.x / norm) * fighter.speed * 3; retreatDestY = fighter.y + (escapeVector.y / norm) * fighter.speed * 3; }
            else if (closestThreat) { retreatDestX = fighter.x + (fighter.x - closestThreat.x) / closestThreatDist * fighter.speed * 3; retreatDestY = fighter.y + (fighter.y - closestThreat.y) / closestThreatDist * fighter.speed * 3; }
            retreatPriority = 35 + intellect.defense * 7 + caution * 25 - aggression * 20;
            if (aggression > 0.92) retreatPriority -= (aggression - 0.92) * 130;
            if (duelContenders && duelContenders.some(dc => dc.id === fighter.id) && fighter.health > fighter.maxHealth * 0.04) retreatPriority -= 70;
            if (fighter.target && fighter.target.health < fighter.target.maxHealth * 0.08) retreatPriority -= 35;
            if (retreatPriority > bestAction.priority) {
                bestAction = { type: 'retreat', destX: retreatDestX, destY: retreatDestY, priority: retreatPriority, message: `–æ—Ç—Å—Ç—É–ø–∞–µ—Ç` };
            }
        }
    }

    // 4. –†–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ –Ω–µ—Ç)
    if (bestAction.type === 'idle' || bestAction.priority < (10 + intellect.spatial * 2.5)) {
        let destX = fighter.x + getRandomInt(-1, 1) * fighter.speed * (1.2 + intellect.spatial * 0.12);
        let destY = fighter.y + getRandomInt(-1, 1) * fighter.speed * (1.2 + intellect.spatial * 0.12);
        // –ê–∫—Ç–∏–≤–Ω–µ–µ —É—Ö–æ–¥–∏—Ç –æ—Ç –∫—Ä–∞–µ–≤
        if (fighter.x < 60) destX = fighter.x + fighter.speed * 1.8;
        if (fighter.x > ARENA_WIDTH - 60) destX = fighter.x - fighter.speed * 1.8;
        if (fighter.y < 60) destY = fighter.y + fighter.speed * 1.8;
        if (fighter.y > ARENA_HEIGHT - 60) destY = fighter.y - fighter.speed * 1.8;
        bestAction = { type: 'reposition', destX, destY, priority: 7 + intellect.spatial * 2.5, message: `–º–∞–Ω–µ–≤—Ä–∏—Ä—É–µ—Ç` };
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    fighter.currentAction = bestAction;

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if (bestAction.type !== 'idle' && bestAction.message) {
        const intellectContextKey = bestAction.type === 'attack' || bestAction.type === 'move_to_attack' ? 'tactical' :
                                   bestAction.type === 'pickup' ? 'resource' :
                                   bestAction.type === 'retreat' ? 'defense' : 'spatial';
        // –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤—ã—à–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∞—Ç–∞–∫–∞, –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –±–æ–Ω—É—Å)
        if (intellect[intellectContextKey] > 1 || ['attack', 'retreat', 'pickup'].includes(bestAction.type)) {
            logIntellectAction(fighter, intellectContextKey, bestAction.message);
        }
    }
}

function executeAction(fighter) {
    if (!fighter.alive || fighter.actionCooldown > 0 || fighter.statusEffects?.stun || !fighter.currentAction) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Weapon Jam –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞—Ç–∞–∫–∏
    if (fighter.statusEffects?.oe_weapon_jam_effect && fighter.currentAction.type === 'attack') {
        logIntellectAction(fighter, 'tactical', `–ø—ã—Ç–∞–µ—Ç—Å—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –Ω–æ –æ—Ä—É–∂–∏–µ –∑–∞–∫–ª–∏–Ω–∏–ª–æ!`);
        fighter.actionCooldown = Math.max(1, Math.round( (10 / (fighter.weapon?.speed || 1)) / 2 * (fighter.actionCooldownMultiplier || 1))); // –£—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –ö–î
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    }

    const action = fighter.currentAction;
    let targetFighter = null;
    if (action.target && action.target.id) {
        targetFighter = currentFighters.find(f => f.id === action.target.id && f.alive);
    }
    let targetBonus = null;
    if(action.targetBonus && action.targetBonus.id) {
        targetBonus = arenaBonuses.find(b => b.id === action.targetBonus.id);
    }
    let moveSpeed = fighter.speed;
    if (fighter.statusEffects && fighter.statusEffects.root) moveSpeed = 0;

    let baseCooldown = 1; // –ë–∞–∑–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω (–≤ —Ç–∏–∫–∞—Ö)

    switch (action.type) {
        case 'attack':
            if (targetFighter) {
                if (fighter.element) fighter.element.classList.add('attacking');
                setTimeout(() => { if(fighter.element) fighter.element.classList.remove('attacking'); }, 100);

                // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Fumble (–ü—Ä–æ–∫–ª—è—Ç–∏–µ –ù–µ—É–∫–ª—é–∂–µ—Å—Ç–∏) ---
                if (fighter.statusEffects?.oe_fumble_effect) {
                    const fumbleEffect = fighter.statusEffects.oe_fumble_effect;
                    if (Math.random() < fumbleEffect.chance) {
                        logMessage(`${fighter.name} <span class="log-effect">–ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è</span> –∏–∑-–∑–∞ –Ω–µ—É–∫–ª—é–∂–µ—Å—Ç–∏!`, "log-effect");
                        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
                        if (fumbleEffect.oneTimeUse) {
                            if (typeof fumbleEffect.onRemove === 'function') fumbleEffect.onRemove(fighter, fumbleEffect);
                            delete fighter.statusEffects.oe_fumble_effect;
                        }
                        baseCooldown = Math.max(1, Math.round( (10 / fighter.weapon.speed) / 2 )); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ö–î –∞—Ç–∞–∫–∏
                        break; // –í—ã—Ö–æ–¥ –∏–∑ switch, –∞—Ç–∞–∫–∞ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
                    }
                    // –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, —É–¥–∞–ª—è–µ–º
                    if (fumbleEffect.oneTimeUse) {
                         if (typeof fumbleEffect.onRemove === 'function') fumbleEffect.onRemove(fighter, fumbleEffect);
                         delete target.statusEffects.oe_fumble_effect; // –£–¥–∞–ª—è–µ–º —É —Ü–µ–ª–∏? –û—à–∏–±–∫–∞, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É –∞—Ç–∞–∫—É—é—â–µ–≥–æ fighter
                         // –ü—Ä–∞–≤–∏–ª—å–Ω–æ: delete fighter.statusEffects.oe_fumble_effect;
                    }
                }
                // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ Fumble ---


                const aoeMeleeEffect = fighter.weapon.effects ? fighter.weapon.effects.find(e => e.type === 'aoe_melee') : null;
                if (aoeMeleeEffect && fighter.weapon.type === 'melee') {
                    createAoeIndicator(fighter.x, fighter.y, aoeMeleeEffect.radius);
                    let targetsHit = 0;
                    currentFighters.filter(f => f.alive && f.id !== fighter.id).forEach(potentialVictim => {
                        if (getDistance(fighter, potentialVictim) <= aoeMeleeEffect.radius) {
                            let damageMult = (potentialVictim.id === targetFighter.id) ? 1.0 : (aoeMeleeEffect.subDamageFactor || 0.7);
                            if (aoeMeleeEffect.selfImmune && potentialVictim.id === fighter.id) return;
                            performAttackDamage(fighter, potentialVictim, fighter.weapon, damageMult);
                            targetsHit++;
                        }
                    });
                    if (targetsHit > 1) addExperience(fighter, 'aoe_hit_multiple', (targetsHit -1));
                } else if (fighter.weapon.type === 'melee') {
                    performAttackDamage(fighter, targetFighter, fighter.weapon);
                } else if (fighter.weapon.type === 'ranged') {
                    createAndAnimateProjectile(fighter, targetFighter, fighter.weapon);
                }
                baseCooldown = Math.max(1, Math.round( (10 / fighter.weapon.speed) / 2) ); // –ö–î –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ä—É–∂–∏—è
            } else {
                fighter.currentAction = null; // –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞/–º–µ—Ä—Ç–≤–∞
            }
            break;
        case 'move_to_attack':
        case 'retreat':
        case 'reposition':
            if (moveSpeed > 0) {
                let destX = action.destX;
                let destY = action.destY;
                if (action.type === 'move_to_attack') {
                    if (targetFighter) { destX = targetFighter.x; destY = targetFighter.y; }
                    else { fighter.currentAction = null; baseCooldown = 1; break; } // –¶–µ–ª—å –ø–æ—Ç–µ—Ä—è–Ω–∞
                }
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∞—Ä–µ–Ω—ã
                 destX = Math.max(FIGHTER_WIDTH / 2, Math.min(ARENA_WIDTH - FIGHTER_WIDTH / 2, destX));
                 destY = Math.max(FIGHTER_HEIGHT / 2, Math.min(ARENA_HEIGHT - FIGHTER_HEIGHT / 2, destY));

                const dx = destX - fighter.x;
                const dy = destY - fighter.y;
                const dist = Math.sqrt(dx * dx + dy * dy);
                if (dist > moveSpeed) { // –ï—Å–ª–∏ –¥–æ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–ª—å—à–µ, —á–µ–º –º–æ–∂–µ–º –ø—Ä–æ–π—Ç–∏ –∑–∞ —Ç–∏–∫
                    fighter.x += (dx / dist) * moveSpeed;
                    fighter.y += (dy / dist) * moveSpeed;
                } else { // –ï—Å–ª–∏ –º–æ–∂–µ–º –¥–æ–π—Ç–∏ –∏–ª–∏ —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ
                    fighter.x = destX;
                    fighter.y = destY;
                    // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if (action.type === 'retreat' || action.type === 'reposition') fighter.currentAction = null;
                }
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                fighter.x = Math.max(FIGHTER_WIDTH / 2, Math.min(ARENA_WIDTH - FIGHTER_WIDTH / 2, fighter.x));
                fighter.y = Math.max(FIGHTER_HEIGHT / 2, Math.min(ARENA_HEIGHT - FIGHTER_HEIGHT / 2, fighter.y));
            }
            baseCooldown = 1; // –î–≤–∏–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω
            break;
        case 'pickup':
            if (targetBonus && moveSpeed > 0) {
                const currentPickupRadius = BONUS_PICKUP_RADIUS * (fighter.pickupRadiusFactor || 1);
                const distToBonus = getDistance(fighter, targetBonus);

                if (distToBonus <= currentPickupRadius) { // –ï—Å–ª–∏ —É–∂–µ –≤ —Ä–∞–¥–∏—É—Å–µ
                    collectBonus(fighter, targetBonus);
                    fighter.currentAction = null; // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                } else { // –î–≤–∏–≥–∞–µ–º—Å—è –∫ –±–æ–Ω—É—Å—É
                    const dx = targetBonus.x - fighter.x;
                    const dy = targetBonus.y - fighter.y;
                    if (distToBonus > moveSpeed) { // –ï—Å–ª–∏ –¥–∞–ª–µ–∫–æ
                        fighter.x += (dx / distToBonus) * moveSpeed;
                        fighter.y += (dy / distToBonus) * moveSpeed;
                    } else { // –ï—Å–ª–∏ –º–æ–∂–µ–º –¥–æ–π—Ç–∏
                        fighter.x = targetBonus.x;
                        fighter.y = targetBonus.y;
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –º–æ–≥–ª–∏ –≤–æ–π—Ç–∏ –≤ —Ä–∞–¥–∏—É—Å
                        if(getDistance(fighter, targetBonus) <= currentPickupRadius) {
                            collectBonus(fighter, targetBonus);
                            fighter.currentAction = null;
                        }
                    }
                    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞—Ä–µ–Ω–æ–π
                    fighter.x = Math.max(FIGHTER_WIDTH / 2, Math.min(ARENA_WIDTH - FIGHTER_WIDTH / 2, fighter.x));
                    fighter.y = Math.max(FIGHTER_HEIGHT / 2, Math.min(ARENA_HEIGHT - FIGHTER_HEIGHT / 2, fighter.y));
                }
            } else { // –ë–æ–Ω—É—Å –∏—Å—á–µ–∑ –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å 0
                fighter.currentAction = null;
            }
            baseCooldown = 1; // –î–≤–∏–∂–µ–Ω–∏–µ –∫ –±–æ–Ω—É—Å—É
            break;
        case 'idle': default: baseCooldown = 1; break;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫—É–ª–¥–∞—É–Ω–∞
    baseCooldown *= (fighter.actionCooldownMultiplier || 1);

    fighter.actionCooldown = Math.max(1, Math.round(baseCooldown)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω (–º–∏–Ω–∏–º—É–º 1 —Ç–∏–∫)

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–±–∏–¥—É –ø—Ä–∏ –∞—Ç–∞–∫–µ
    if(fighter.actionCooldown > 0 && fighter.currentAction?.type === 'attack') {
        if (targetFighter && fighter.combatStats && fighter.combatStats.learnedGrudges) {
            fighter.combatStats.learnedGrudges[targetFighter.id] = (fighter.combatStats.learnedGrudges[targetFighter.id] || 0) + 1;
        }
    }
}

function createAndAnimateProjectile(attacker, target, weapon) {
    const projectileEl = createProjectileElement(attacker, weapon);
    if (!projectileEl) return;

    // –£—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–Ω–∞—Ä—è–¥–æ–≤
    const currentProjectileSpeed = PROJECTILE_SPEED * (attacker.projectileSpeedFactor || 1);

    const startX = attacker.x;
    const startY = attacker.y - (FIGHTER_HEIGHT / 4) ; // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —á—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞

    // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–ª–∏ (–º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –ø–æ–≤–æ—Ä–æ—Ç—ã –∏ —Ç.–¥.)
    const estimatedTravelTimeTicks = getDistance({x: startX, y: startY}, target) / currentProjectileSpeed;
    let targetPredictedX = target.x;
    let targetPredictedY = target.y;
    // –ï—Å–ª–∏ —Ü–µ–ª—å –¥–≤–∏–∂–µ—Ç—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –µ–µ –ø–æ–∑–∏—Ü–∏—é
    if (target.currentAction && (target.currentAction.type === 'move_to_attack' || target.currentAction.type === 'retreat' || target.currentAction.type === 'reposition')) {
        const targetDx = target.currentAction.destX - target.x;
        const targetDy = target.currentAction.destY - target.y;
        const targetDist = Math.sqrt(targetDx*targetDx + targetDy*targetDy);
        if (targetDist > 0) {
            const targetMoveXPerTick = (targetDx / targetDist) * target.speed;
            const targetMoveYPerTick = (targetDy / targetDist) * target.speed;
            targetPredictedX += targetMoveXPerTick * estimatedTravelTimeTicks * 0.5; // –£–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞
            targetPredictedY += targetMoveYPerTick * estimatedTravelTimeTicks * 0.5;
        }
    }

    const dx = targetPredictedX - startX;
    const dy = targetPredictedY - startY;
    const dist = Math.sqrt(dx * dx + dy * dy);
    if (dist === 0) { if (projectileEl.parentElement) projectileEl.remove(); handleProjectileHit(attacker, target, weapon, {x: startX, y: startY}); return; } // –ï—Å–ª–∏ —Å—Ç—Ä–µ–ª—è–µ–º –≤ —É–ø–æ—Ä

    const moveX = (dx / dist) * currentProjectileSpeed;
    const moveY = (dy / dist) * currentProjectileSpeed;
    let currentX = startX;
    let currentY = startY;
    const travelTicks = Math.max(1, Math.round(dist / currentProjectileSpeed)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Math.round
    let ticksPassed = 0;

    function animateProjectileTick() {
        if (!roundInProgress || !attacker.alive || !projectileEl.parentElement) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—è
            if (projectileEl.parentElement) projectileEl.remove();
            return;
        }
        ticksPassed++;
        currentX += moveX;
        currentY += moveY;
        projectileEl.style.left = `${currentX - (projectileEl.offsetWidth / 2 || 12)}px`;
        projectileEl.style.top = `${currentY - (projectileEl.offsetHeight / 2 || 12)}px`;

        const finalTargetCheck = currentFighters.find(f => f.id === target.id && f.alive);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–∂–µ–Ω–∏—è —É —Ü–µ–ª–∏
        if (finalTargetCheck?.statusEffects?.oe_deflection_aura_effect) {
            if (Math.random() < finalTargetCheck.statusEffects.oe_deflection_aura_effect.chance) {
                logMessage(`${finalTargetCheck.name} <span class="log-evasion">–æ—Ç—Ä–∞–∂–∞–µ—Ç</span> —Å–Ω–∞—Ä—è–¥ ${attacker.name}!`, "log-evasion");
                if (projectileEl.parentElement) projectileEl.remove();
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–Ω–∞—Ä—è–¥, –ª–µ—Ç—è—â–∏–π –æ–±—Ä–∞—Ç–Ω–æ
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ—Ç
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
        if (finalTargetCheck && getDistance({x: currentX, y: currentY}, finalTargetCheck) < (FIGHTER_WIDTH / 2) ) {
            if (projectileEl.parentElement) projectileEl.remove();
            handleProjectileHit(attacker, finalTargetCheck, weapon, {x: currentX, y: currentY}); return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª–µ—Ç–∞
        if (ticksPassed >= travelTicks || currentX < -projectileEl.offsetWidth || currentX > ARENA_WIDTH || currentY < -projectileEl.offsetHeight || currentY > ARENA_HEIGHT) {
            if (projectileEl.parentElement) projectileEl.remove();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã —Ä—è–¥–æ–º —Å —Ü–µ–ª—å—é –≤ –º–æ–º–µ–Ω—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            const finalTarget = currentFighters.find(f => f.id === target.id && f.alive);
            if (finalTarget && getDistance({x: currentX, y: currentY}, finalTarget) < (FIGHTER_WIDTH * 0.75) ) {
                 handleProjectileHit(attacker, finalTarget, weapon, {x: currentX, y: currentY});
            }
        } else {
             // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
             requestAnimationFrame(animateProjectileTick);
             // –°—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å setTimeout:
             // setTimeout(animateProjectileTick, Math.max(16, GAME_SPEED / (currentProjectileSpeed / 1.2)) );
        }
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
    requestAnimationFrame(animateProjectileTick);
}

function handleProjectileHit(attacker, finalTarget, weapon, hitCoords) {
    const aoeRangedEffect = weapon.effects ? weapon.effects.find(e => e.type === 'aoe_ranged') : null;
    if (aoeRangedEffect && aoeRangedEffect.radius) {
        createAoeIndicator(hitCoords.x, hitCoords.y, aoeRangedEffect.radius);
        let mainTargetWasHitInAoe = false;
        let targetsHitCount = 0;
        currentFighters.filter(f => f.alive).forEach(potentialVictim => {
            if (getDistance(hitCoords, potentialVictim) <= aoeRangedEffect.radius) {
                if (potentialVictim.id === attacker.id && aoeRangedEffect.selfImmune) return; // –°–∞–º–æ–∏–º–º—É–Ω–Ω–æ—Å—Ç—å
                let aoeDamageMultiplier = 1.0;
                // –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–Ω –¥–ª—è –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π
                if (finalTarget && potentialVictim.id !== finalTarget.id && aoeRangedEffect.subDamageFactor !== undefined) aoeDamageMultiplier = aoeRangedEffect.subDamageFactor;
                else if (!finalTarget && aoeRangedEffect.subDamageFactor !== undefined) aoeDamageMultiplier = aoeRangedEffect.subDamageFactor; // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ª–∏ –Ω–µ—Ç (—É–º–µ—Ä–ª–∞?), –≤—Å–µ –ø–æ–ª—É—á–∞—é—Ç —Å–Ω–∏–∂–µ–Ω–Ω—ã–π —É—Ä–æ–Ω

                performAttackDamage(attacker, potentialVictim, weapon, aoeDamageMultiplier);
                targetsHitCount++;
                if (finalTarget && potentialVictim.id === finalTarget.id) mainTargetWasHitInAoe = true;
            }
        });
        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –Ω–µ –ø–æ–ø–∞–ª–∞ –ø–æ–¥ AOE (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Å–∞–º–æ–∏–º–º—É–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é)
        // –Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∞ –ø—Ä—è–º—ã–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º (—ç—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω –ø—Ä–∏ AOE, –Ω–æ –≤—Å–µ –∂–µ)
        if (finalTarget && !mainTargetWasHitInAoe && getDistance(hitCoords, finalTarget) <= aoeRangedEffect.radius) {
             if (!(finalTarget.id === attacker.id && aoeRangedEffect.selfImmune)) {
                 performAttackDamage(attacker, finalTarget, weapon, 1.0); // –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —É—Ä–æ–Ω
                 targetsHitCount++;
             }
        }
        // –û–ø—ã—Ç –∑–∞ –º—É–ª—å—Ç–∏-–ø–æ–ø–∞–¥–∞–Ω–∏–µ
        if (targetsHitCount > 1) {
            addExperience(attacker, 'aoe_hit_multiple', (targetsHitCount - 1));
        }
    } else if (finalTarget) { // –û–±—ã—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –±–µ–∑ AOE
        performAttackDamage(attacker, finalTarget, weapon);
    }
}


function performAttackDamage(attacker, target, weaponToUse, damageMultiplier = 1.0) {
    if (!target.alive || !attacker.alive || !weaponToUse) return;
    lastDamageTimestamp = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–Ω–∞

    const isSilenced = attacker.statusEffects && attacker.statusEffects.oe_silence_effect;
    if (isSilenced) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á–∞—Å—Ç–æ –≤–∏–¥–µ—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –º–æ–ª—á–∞–Ω–∏—è
        // logMessage(`${attacker.name} –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü. —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ä—É–∂–∏—è (–º–æ–ª—á–∞–Ω–∏–µ)!`, "log-effect");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–Ω—Å–∞ –ø—Ä–æ–º–∞—Ö–∞ –∏–∑-–∑–∞ –æ—Å–ª–µ–ø–ª–µ–Ω–∏—è (oe_accuracy_debuff_effect)
    if (attacker.statusEffects?.oe_accuracy_debuff_effect) {
        if (Math.random() < (attacker.statusEffects.oe_accuracy_debuff_effect.missChance || 0.15)) {
            logMessage(`${attacker.name} <span class="log-effect">–ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è</span> –∏–∑-–∑–∞ –æ—Å–ª–µ–ø–ª–µ–Ω–∏—è!`, "log-effect");
            return; // –ê—Ç–∞–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å
        }
    }

    const isCrit = Math.random() < (weaponToUse.critChance || 0);
    let damage = getRandomInt(weaponToUse.minDamage || 0, weaponToUse.maxDamage || 0);

    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—Ä–∏—Ç. —É—Ä–æ–Ω–∞
    if (isCrit) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ê–Ω—Ç–∏-–ö—Ä–∏—Ç –©–∏—Ç —Ü–µ–ª–∏
        if (target.canNullifyCrit) {
            logMessage(`${target.name} <span class="log-armor-block">–ø–æ–≥–ª–æ—â–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä</span> ${attacker.name} –∞–Ω—Ç–∏-–∫—Ä–∏—Ç —â–∏—Ç–æ–º!`, "log-armor-block");
            target.canNullifyCrit = false;
            // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º
            const critDefEffect = target.statusEffects?.oe_crit_defense_effect;
            if (critDefEffect) {
                 if (typeof critDefEffect.onRemove === 'function') critDefEffect.onRemove(target, critDefEffect);
                 delete target.statusEffects.oe_crit_defense_effect;
                 updateFighterElement(target); // –û–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —â–∏—Ç–∞
            }
            return; // –£—Ä–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–µ–Ω
        }
        damage = Math.round(damage * 1.5 * (target.critDamageTakenMultiplier || 1)); // –ë–∞–∑–æ–≤—ã–π –∫—Ä–∏—Ç x1.5 + –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–ª–∏
    }

    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —É—Ä–æ–Ω–∞ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    damage = Math.round(damage * (attacker.damageOutputMultiplier || 1));
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞—Ç–∞–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è AOE)
    damage = Math.round(damage * damageMultiplier);


    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è ---
    const isAOE = weaponToUse.effects && weaponToUse.effects.some(e => e.type === 'aoe_melee' || e.type === 'aoe_ranged');
    const evasionRoll = Math.random();
    const targetEvasionChance = (target.evasionChance || 0) + (target.combatStats.intellect.defense * 0.01); // –î–æ–±–∞–≤–∏–º –±–æ–Ω—É—Å –æ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    if (!isAOE && evasionRoll < targetEvasionChance ) { // AOE –∞—Ç–∞–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–∫–ª–æ–Ω–µ–Ω—ã (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —à–∞–Ω—Å?)
        logMessage(`${target.name} <span class="log-evasion">—É–∫–ª–æ–Ω—è–µ—Ç—Å—è</span> –æ—Ç –∞—Ç–∞–∫–∏ ${attacker.name}!`, "log-evasion");
        addExperience(target, 'evade_attack');
        if (target.combatStats.intellect.defense > 2) logIntellectAction(target, 'defense', '–£–∫–ª–æ–Ω–∏–ª—Å—è!');
        return; // –£—Ä–æ–Ω –Ω–µ –Ω–∞–Ω–µ—Å–µ–Ω
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∫–ª–æ–Ω–µ–Ω–∏—è ---


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–∏—Ç–∏—è –±—Ä–æ–Ω–∏
    const armorPierceEffect = weaponToUse.effects ? weaponToUse.effects.find(e => e.type === 'armor_pierce') : null;
    const piercesArmor = armorPierceEffect && (Math.random() < (armorPierceEffect.chance || 0.0)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–Ω—Å –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º –±—Ä–æ–Ω–∏ –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    const damageResult = applyDamage(target, damage, attacker, isCrit, weaponToUse.name, piercesArmor, weaponToUse.type === 'melee');


    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ä—É–∂–∏—è (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥ –º–æ–ª—á–∞–Ω–∏–µ–º –∏ —É—Ä–æ–Ω –ø—Ä–æ—à–µ–ª –∏–ª–∏ –ø—Ä–æ–±–∏–ª –±—Ä–æ–Ω—é)
    if (!isSilenced && (damageResult.damageApplied > 0 || (damageResult.blockedByArmor && piercesArmor))) {
         if (weaponToUse.effects && weaponToUse.effects.length > 0) {
            weaponToUse.effects.forEach(effect => {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–Ω–µ AOE, –Ω–µ –ø–∏—Ä—Å–∏–Ω–≥, –Ω–µ –ª–∞–π—Ñ—Å—Ç–∏–ª –∏ —Ç.–¥.)
                if (['stun', 'poison', 'slow', 'root', 'burn'].includes(effect.type)) {
                    if (Math.random() < (effect.chance || 1.0)) { // –£—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å —ç—Ñ—Ñ–µ–∫—Ç–∞
                        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, dps –∏ —Ç.–¥.)
                        applyStatusEffect(target, effect.type, { ...effect, sourceId: attacker.id });
                    }
                }
            });
        }
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ä—É–∂–∏—è (–ª–∞–π—Ñ—Å—Ç–∏–ª, –ø—É—à/–ø—É–ª–ª)
        applyWeaponSpecialEffects(attacker, target, weaponToUse, damageResult.damageApplied);
    }
}

function applyDamage(target, damage, attackerInfo, isCrit, sourceName = "–∞—Ç–∞–∫–∞", piercesArmor = false, isMeleeAttack = false) {
    if (!target.alive) return { damageApplied: 0, blockedByArmor: false };
    lastDamageTimestamp = Date.now();

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ ---
    if (target.isInvulnerable) {
        logMessage(`${target.name} <span class="log-evasion">–Ω–µ—É—è–∑–≤–∏–º</span> –∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω–∞ –æ—Ç ${attackerInfo.name || "–∏—Å—Ç–æ—á–Ω–∏–∫–∞"}!`, "log-evasion");
        return { damageApplied: 0, blockedByArmor: false };
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ ---

    let actualDamage = damage;
    let blockedByArmorThisHit = false;
    const attackerName = attackerInfo.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫";
    const attackerId = attackerInfo.id || null;

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Ü–µ–ª–∏ (–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –°–ª–∞–±–æ–µ –ú–µ—Å—Ç–æ –í—Ä–∞–≥–∞) ---
    if (target.vulnerabilityBonusNextHit && target.vulnerabilityBonusNextHit > 1) {
        actualDamage = Math.round(actualDamage * target.vulnerabilityBonusNextHit);
        logMessage(`${target.name} –ø–æ–ª—É—á–∞–µ—Ç <span class="log-crit-damage">—É—Å–∏–ª–µ–Ω–Ω—ã–π —É—Ä–æ–Ω</span> –ø–æ —Å–ª–∞–±–æ–º—É –º–µ—Å—Ç—É! (x${target.vulnerabilityBonusNextHit.toFixed(1)})`, "log-crit-damage");
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥/–º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
         // –í–∞–∂–Ω–æ: damageTakenMultiplier –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ onRemove —ç—Ñ—Ñ–µ–∫—Ç–∞ oe_vulnerability_effect
         delete target.vulnerabilityBonusNextHit;
         // –£–¥–∞–ª—è–µ–º —Å–∞–º —Å—Ç–∞—Ç—É—Å —ç—Ñ—Ñ–µ–∫—Ç, —Ç.–∫. –æ–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
         const vulnEffect = target.statusEffects?.oe_vulnerability_effect;
         if (vulnEffect && vulnEffect.oneTimeUse) {
             if (typeof vulnEffect.onRemove === 'function') vulnEffect.onRemove(target, vulnEffect);
             delete target.statusEffects.oe_vulnerability_effect;
         }
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ ---


    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ë—Ä–æ–Ω–∏ ---
    if (target.hasArmor && target.armorHits > 0 && !piercesArmor && !sourceName.includes("–°–ø–æ—Ä—ã") && !sourceName.includes("–Ø–¥")) { // –°–ø–æ—Ä—ã –∏ —è–¥ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –±—Ä–æ–Ω—é
        target.armorHits--;
        blockedByArmorThisHit = true;
        actualDamage = 0; // –£—Ä–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–µ–Ω
        logMessage(`üõ°Ô∏è <span class="log-armor-block">–ë—Ä–æ–Ω—è ${target.name} –ø–æ–≥–ª–æ—â–∞–µ—Ç —É–¥–∞—Ä –æ—Ç ${attackerName}! (–û—Å—Ç–∞–ª–æ—Å—å: ${target.armorHits})</span>`, "log-armor-block");
        showDamageFlash(target, false, true); // –í—Å–ø—ã—à–∫–∞ –±–ª–æ–∫–∞
        showHitSpark(target, false, true);   // –ò—Å–∫—Ä–∞ –±–ª–æ–∫–∞
        addExperience(target, 'block_attack'); // –û–ø—ã—Ç –∑–∞ –±–ª–æ–∫
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ª–æ–º–∞–Ω–∞ –ª–∏ –±—Ä–æ–Ω—è
        if (target.armorHits <= 0) {
            target.hasArmor = false;
            target.maxArmorHits = 0;
            logMessage(`üíî <span class="log-armor">–ë—Ä–æ–Ω—è ${target.name} —Å–ª–æ–º–∞–Ω–∞!</span>`, "log-armor");
        }
        updateFighterElement(target);
        // –í—ã—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ —É—Ä–æ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª
        return { damageApplied: 0, blockedByArmor: true };
    }
    // –õ–æ–≥ –ø—Ä–æ–±–∏—Ç–∏—è –±—Ä–æ–Ω–∏
    if (piercesArmor && target.hasArmor) {
        logMessage(`‚ö° <span class="log-effect">${attackerName} –ø—Ä–æ–±–∏–≤–∞–µ—Ç –±—Ä–æ–Ω—é ${target.name}!</span>`, "log-effect");
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë—Ä–æ–Ω–∏ ---


    // --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ —É—Ä–æ–Ω–∞ ---
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ë–∞—Ä—å–µ—Ä–∞
    if (target.kineticBarrierActive && target.kineticBarrierActive.hitsLeft > 0) {
        actualDamage = Math.round(actualDamage * target.kineticBarrierActive.damageReduction);
        target.kineticBarrierActive.hitsLeft--;
        logMessage(`${target.name} <span class="log-armor-block">—Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω</span> –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º –±–∞—Ä—å–µ—Ä–æ–º! (–û—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä—è–¥–æ–≤: ${target.kineticBarrierActive.hitsLeft})`, "log-armor-block");
        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –∑–∞—Ä—è–¥—ã –∫–æ–Ω—á–∏–ª–∏—Å—å
        if (target.kineticBarrierActive.hitsLeft <= 0) {
            const barrierEffect = target.kineticBarrierActive; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            delete target.kineticBarrierActive; // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥/—Å—Å—ã–ª–∫—É
            // –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç
            const effectKey = Object.keys(target.statusEffects).find(k => target.statusEffects[k] === barrierEffect);
            if(effectKey){
                if (typeof target.statusEffects[effectKey].onRemove === 'function') target.statusEffects[effectKey].onRemove(target, target.statusEffects[effectKey]);
                delete target.statusEffects[effectKey];
            }
        }
    }
    // –û–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ —É—Ä–æ–Ω–∞
    actualDamage = Math.round(actualDamage * (target.damageTakenMultiplier || 1));
    if (actualDamage < 0) actualDamage = 0; // –£—Ä–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    // --- –ö–æ–Ω–µ—Ü –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Ä–æ–Ω–∞ ---

    // --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –†–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ë—Ä–æ–Ω–∏ (–ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–Ω–∞, –Ω–æ –¥–æ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –∑–¥–æ—Ä–æ–≤—å—é) ---
    if (target.reactiveArmorCharge && target.reactiveArmorCharge.charges > 0 && actualDamage >= target.reactiveArmorCharge.threshold) {
        logMessage(`${target.name} <span class="log-effect">–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω—É—é –±—Ä–æ–Ω—é</span>, –æ—Ç–±—Ä–∞—Å—ã–≤–∞—è –≤—Ä–∞–≥–æ–≤!`, "log-effect");
        target.reactiveArmorCharge.charges--;
        // –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥ (–∫—Ä–æ–º–µ —Å–µ–±—è)
        currentFighters.filter(f => f.alive && f.id !== target.id && getDistance(target, f) < 100).forEach(otherFighter => {
            const dx = otherFighter.x - target.x;
            const dy = otherFighter.y - target.y;
            const distPush = Math.sqrt(dx*dx + dy*dy);
            if (distPush > 0) {
                otherFighter.x += (dx / distPush) * target.reactiveArmorCharge.pushDistance;
                otherFighter.y += (dy / distPush) * target.reactiveArmorCharge.pushDistance;
                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞—Ä–µ–Ω–æ–π
                otherFighter.x = Math.max(FIGHTER_WIDTH / 2, Math.min(ARENA_WIDTH - FIGHTER_WIDTH / 2, otherFighter.x));
                otherFighter.y = Math.max(FIGHTER_HEIGHT / 2, Math.min(ARENA_HEIGHT - FIGHTER_HEIGHT / 2, otherFighter.y));
                updateFighterElement(otherFighter);
            }
        });
        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –∑–∞—Ä—è–¥—ã –∫–æ–Ω—á–∏–ª–∏—Å—å
        if (target.reactiveArmorCharge.charges <= 0) {
             const reactiveEffect = target.reactiveArmorCharge;
             delete target.reactiveArmorCharge;
             const effectKey = Object.keys(target.statusEffects).find(k => target.statusEffects[k] === reactiveEffect);
             if(effectKey){
                if (typeof target.statusEffects[effectKey].onRemove === 'function') target.statusEffects[effectKey].onRemove(target, target.statusEffects[effectKey]);
                 delete target.statusEffects[effectKey];
             }
        }
    }
    // --- –ö–æ–Ω–µ—Ü –†–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ë—Ä–æ–Ω–∏ ---


    // --- –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –∑–¥–æ—Ä–æ–≤—å—é ---
    target.health -= actualDamage;
    // --- –ö–æ–Ω–µ—Ü –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –∑–¥–æ—Ä–æ–≤—å—é ---


    // --- –≠—Ñ—Ñ–µ–∫—Ç—ã –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ ---
    // –ó–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ç–∞–∫–æ–≤–∞–≤—à–µ–≥–æ –∏ –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞
    if (attackerId && !String(attackerId).startsWith('status-') && !String(attackerId).startsWith('orbital_effect')) {
        target.lastDamagedBy = attackerId;
        const attackingFighter = currentFighters.find(f => f.id === attackerId);
        if (attackingFighter) attackingFighter.damageDealtThisRound = (attackingFighter.damageDealtThisRound || 0) + actualDamage;
    }

    // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —É—Ä–æ–Ω–∞
    showDamageFlash(target, isCrit, false);
    showHitSpark(target, isCrit, false);
    if (target.element) target.element.classList.add('hit');
    setTimeout(() => { if (target.element) target.element.classList.remove('hit'); }, 150);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–Ω–∞
    const damageClass = isCrit ? "log-crit-damage" : "log-damage";
    logMessage(`${attackerName} (${sourceName}) –Ω–∞–Ω–æ—Å–∏—Ç <span class="${damageClass}">${actualDamage}</span> —É—Ä–æ–Ω–∞ ${target.name}. (–û–ó: ${Math.max(0, target.health)})`, damageClass);


    // --- –®–∏–ø—ã (Thorns) ---
    if (target.statusEffects?.oe_thorns_effect && isMeleeAttack && actualDamage > 0) {
         const thornDamage = target.statusEffects.oe_thorns_effect.reflectDamage || 0;
         if (thornDamage > 0 && attackerId && !String(attackerId).startsWith('status-') && !String(attackerId).startsWith('orbital_effect')) {
             const originalAttacker = currentFighters.find(f => f.id === attackerId);
             if (originalAttacker && originalAttacker.alive) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ç–∞–∫—É—é—â–∏–π –µ—â–µ –∂–∏–≤
                logMessage(`üåµ <span style="color:#795548;">–®–∏–ø—ã ${target.name} –Ω–∞–Ω–æ—Å—è—Ç ${thornDamage} —É—Ä–æ–Ω–∞ ${originalAttacker.name}!</span>`, "log-effect");
                // –£—Ä–æ–Ω –æ—Ç —à–∏–ø–æ–≤ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫—Ä–∏—Ç–æ–º, –Ω–µ –ø—Ä–æ–±–∏–≤–∞–µ—Ç –±—Ä–æ–Ω—é –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä—É–∫–æ–ø–∞—à–Ω–æ–π –∞—Ç–∞–∫–æ–π (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è)
                applyDamage(originalAttacker, thornDamage, {name: "–®–∏–ø—ã", id: `thorns-${target.id}`}, false, "–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —à–∏–ø–æ–≤", false, false);
             }
         }
    }
    // --- –ö–æ–Ω–µ—Ü –®–∏–ø–æ–≤ ---

    // --- –ü–∞—Ä–∞–∑–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å ---
    if (target.statusEffects?.oe_shared_pain_effect && actualDamage > 0) {
        const linkEffect = target.statusEffects.oe_shared_pain_effect;
        const sharedDamage = Math.round(actualDamage * linkEffect.percent);
        if (sharedDamage > 0) {
            // –ò—â–µ–º *–¥—Ä—É–≥–æ–≥–æ* –∂–∏–≤–æ–≥–æ –±–æ–π—Ü–∞ (–Ω–µ —Ü–µ–ª—å –∏ –Ω–µ –∞—Ç–∞–∫—É—é—â–µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
            const otherFighters = currentFighters.filter(f => f.alive && f.id !== target.id && f.id !== attackerId);
            if (otherFighters.length > 0) {
                const unfortunateVictim = otherFighters[getRandomInt(0, otherFighters.length - 1)];
                logMessage(`üîó <span style="color:darkgreen;">–ü–∞—Ä–∞–∑–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –ø–µ—Ä–µ–¥–∞–µ—Ç ${sharedDamage} —É—Ä–æ–Ω–∞ –æ—Ç ${target.name} –∫ ${unfortunateVictim.name}!</span>`, "log-effect");
                applyDamage(unfortunateVictim, sharedDamage, {name: "–ü–∞—Ä–∞–∑–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å", id: `link-${target.id}`}, false, "—Å–≤—è–∑—å", true, false); // –£—Ä–æ–Ω –æ—Ç —Å–≤—è–∑–∏ –º–æ–∂–µ—Ç –ø—Ä–æ–±–∏–≤–∞—Ç—å –±—Ä–æ–Ω—é? –†–µ—à–∞–µ–º: –¥–∞ (true)
            }
        }
    }
    // --- –ö–æ–Ω–µ—Ü –ü–∞—Ä–∞–∑–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤—è–∑–∏ ---


    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ —Ü–µ–ª–∏ ---
    if (target.health <= 0) {
        target.health = 0;
        target.alive = false;
        if (target.element) {
            target.element.classList.remove('breathing');
            target.element.classList.add('defeated'); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        }
        defeatedFightersOrder.push(target.id); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–±—ã–≤—à–∏—Ö
        logMessage(`${target.name} <span class="log-kill">–ø–æ–≤–µ—Ä–∂–µ–Ω</span> –æ—Ç —Ä—É–∫–∏ ${attackerName}!`, "log-kill");

        // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∑–∞ —É–±–∏–π—Å—Ç–≤–æ
        if (attackerId && !String(attackerId).startsWith('status-') && !String(attackerId).startsWith('orbital_effect')) {
            const attackingFighter = currentFighters.find(f => f.id === attackerId);
            if (attackingFighter) {
                attackingFighter.killsThisRound = (attackingFighter.killsThisRound || 0) + 1;
                addExperience(attackingFighter, 'kill');
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –æ–ø–∞—Å–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –∏–ª–∏ –≤—Ä–∞–≥–∞ —Å –≤—ã—Å–æ–∫–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
                if(getTotalIntellect(target) > getTotalIntellect(attackingFighter) + 2 || target.wins > attackingFighter.wins) {
                   addExperience(attackingFighter, 'defeat_dangerous_enemy');
                } else {
                   addExperience(attackingFighter, 'kill_major_boost'); // –û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–∏–ª–ª
                }
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                if (attackingFighter.combatStats.learning && attackingFighter.combatStats.learning.weaponEffectiveness) {
                     attackingFighter.combatStats.learning.weaponEffectiveness[target.id] = (attackingFighter.combatStats.learning.weaponEffectiveness[target.id] || 0) + 1; // –ü–æ–≤—ã—à–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                }
            }
        }
        // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        // updateFighterElement(target); // –ù–æ updateFighterElement –ø—Ä–æ–≤–µ—Ä—è–µ—Ç target.alive, —Ç–∞–∫ —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ
    } else { // –ï—Å–ª–∏ —Ü–µ–ª—å –≤—ã–∂–∏–ª–∞
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫—Ç–æ –Ω–∞–Ω–µ—Å —É—Ä–æ–Ω (–¥–ª—è AI)
        if (attackerId && !String(attackerId).startsWith('status-') && !String(attackerId).startsWith('orbital_effect') && target.combatStats && target.combatStats.learning && target.combatStats.learning.dangerousEnemies) {
            target.combatStats.learning.dangerousEnemies[attackerId] = (target.combatStats.learning.dangerousEnemies[attackerId] || 0) + actualDamage;
        }
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ—Ä—Ç–∏ ---

    updateFighterElement(target); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ —Ü–µ–ª–∏ (–∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ç.–¥.)
    return { damageApplied: actualDamage, blockedByArmor: false }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
}