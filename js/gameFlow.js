// --- GAME FLOW ---

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥.
 * @param {boolean} [isStallRestart=false] - –ë—ã–ª –ª–∏ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –∑–∞—Å—Ç–æ—è (–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞).
 */
function endRound(isStallRestart = false) {
    console.log(`endRound called. isStallRestart: ${isStallRestart}, roundInProgress: ${roundInProgress}`);

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –ö–†–û–ú–ï —Å–ª—É—á–∞—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ
    if (!roundInProgress && !isStallRestart) {
         console.log("endRound: Exiting because round not in progress and not a stall/manual restart.");
         return;
    }

    // –í–∞–∂–Ω–æ: –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    if (gameLoopInterval) {
        clearInterval(gameLoopInterval);
        gameLoopInterval = null;
        console.log("endRound: Cleared gameLoopInterval.");
    }
    if (preRoundTimeoutId) {
        clearTimeout(preRoundTimeoutId);
        preRoundTimeoutId = null;
        console.log("endRound: Cleared preRoundTimeoutId.");
    }
    roundInProgress = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ —Ä–∞—É–Ω–¥ –±–æ–ª—å—à–µ –Ω–µ –∏–¥–µ—Ç

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞
    if(startButtonEl) startButtonEl.disabled = true;
    if(restartRoundButtonEl) restartRoundButtonEl.disabled = true;


    // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–∑-–∑–∞ –∑–∞—Å—Ç–æ—è –∏–ª–∏ –≤—Ä—É—á–Ω—É—é ---
    if (isStallRestart) {
        logMessage(`üèÅ <span class='log-stall-restart'>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞ ${roundCounter}...</span>`, "log-stall-restart");
        // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
         if (arenaEl) arenaEl.innerHTML = '';
         clearOrbitalEffects();
         arenaBonuses.forEach(b => { if (b.element?.parentElement) b.element.remove(); });
         arenaBonuses = [];
         currentFighters = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –±–æ–π—Ü–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        preRoundTimeoutId = setTimeout(() => {
            if (isGameOver) {
                 console.log("endRound (stall/manual restart): Game is over, not restarting round.");
                 return;
            }
             console.log("endRound (stall/manual restart): Calling setupNewRound(true, true)...");
            // true –¥–ª—è isContinuation (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤), true –¥–ª—è isManualRestart (–Ω–µ –¥–∞–≤–∞—Ç—å –∑–æ–ª–æ—Ç–æ)
            setupNewRound(true, true);
        }, NEW_ROUND_DELAY / 2); // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
        return; // –í—ã—Ö–æ–¥, –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ –Ω–µ –Ω—É–∂–Ω–∞
    }

    // --- –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫) ---
    console.log("endRound: Proceeding with normal end round logic.");
    const aliveFightersCurrent = currentFighters.filter(f => f.alive);
    let winner = null;

    if (aliveFightersCurrent.length === 1) {
        winner = aliveFightersCurrent[0];
        logMessage(`üéâ <span class="log-winner">${winner.name}</span> –ü–û–ë–ï–ñ–î–ê–ï–¢ –í –†–ê–£–ù–î–ï ${roundCounter}!`, "log-winner");
        const winnerData = fightersInitialData.find(f => f.id === winner.id);
        if (winnerData) winnerData.wins++;

        const totalInt = getTotalIntellect(winner);
        if (totalInt >= 12) {
             let intellectSummary = `(${INTELLECT_SYMBOLS.tactical}${winner.combatStats.intellect.tactical} ${INTELLECT_SYMBOLS.defense}${winner.combatStats.intellect.defense} ${INTELLECT_SYMBOLS.resource}${winner.combatStats.intellect.resource} ${INTELLECT_SYMBOLS.spatial}${winner.combatStats.intellect.spatial})`;
             logMessage(`üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: <span class="log-winner">${intellectSummary}</span>`, "log-winner");
        }

    } else if (aliveFightersCurrent.length === 0) {
        logMessage(`üíî –í—Å–µ –±–æ–π—Ü—ã –ø–∞–ª–∏ –≤ —Ä–∞—É–Ω–¥–µ ${roundCounter}! –ù–∏—á—å—è...`, "log-winner");
    } else {
        // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ª–æ–≥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        logMessage(`ü§î –†–∞—É–Ω–¥ ${roundCounter} –∑–∞–≤–µ—Ä—à–µ–Ω (${aliveFightersCurrent.length} –≤—ã–∂–∏–≤—à–∏—Ö). –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏—Å—Ö–æ–¥.`, "log-winner");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
    if (currentBet.placed && currentBet.fighterId && currentBet.amount > 0) {
        let payoutMultiplier = 0;
        let placeTaken = 0;
        const betOnFighterData = fightersInitialData.find(f => f.id === currentBet.fighterId);
        const betOnFighterName = betOnFighterData ? betOnFighterData.name : "–ë–æ–µ—Ü";
        const totalFightersInRound = currentFighters.length; // –û–±—â–µ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–∞—É–Ω–¥–µ

        if (winner && winner.id === currentBet.fighterId) { // –°—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            payoutMultiplier = 10; placeTaken = 1;
        } else { // –ü—Ä–æ–≤–µ—Ä—è–µ–º 2-–µ –∏ 3-–µ –º–µ—Å—Ç–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤—ã–±—ã–≤—à–∏—Ö
            const actualDefeatedCount = defeatedFightersOrder.length;
            // –ï—Å–ª–∏ –±–æ–µ—Ü –∑–∞–Ω—è–ª 2–µ –º–µ—Å—Ç–æ (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—ã–≤—à–∏–π –ò–õ–ò –≤—Ç–æ—Ä–æ–π –≤—ã–∂–∏–≤—à–∏–π, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
            if (actualDefeatedCount >= totalFightersInRound - 1 && defeatedFightersOrder[actualDefeatedCount - 1] === currentBet.fighterId) {
                 payoutMultiplier = 5; placeTaken = 2;
            }
            // –ï—Å–ª–∏ –±–æ–µ—Ü –∑–∞–Ω—è–ª 3–µ –º–µ—Å—Ç–æ (—Ç—Ä–µ—Ç–∏–π —Å –∫–æ–Ω—Ü–∞ –≤—ã–±—ã–≤—à–∏–π)
            else if (actualDefeatedCount >= totalFightersInRound - 2 && defeatedFightersOrder[actualDefeatedCount - 2] === currentBet.fighterId) {
                 payoutMultiplier = 3; placeTaken = 3;
            }
        }


        if (payoutMultiplier > 0) {
            const winnings = currentBet.amount * payoutMultiplier;
            playerGold += winnings;
            logMessage(`üí∞ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ <span class="log-winner">${betOnFighterName}</span> (${placeTaken}-–µ –º–µ—Å—Ç–æ) –≤—ã–∏–≥—Ä–∞–ª–∞! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${winnings.toLocaleString()} –∑–æ–ª–æ—Ç–∞!`, "log-winner");
        } else {
            logMessage(`üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ <span class="log-damage">${betOnFighterName}</span> –Ω–µ —Å—ã–≥—Ä–∞–ª–∞.`, "log-damage");
        }
        currentBet = { fighterId: null, amount: 0, placed: false }; // –°–±—Ä–æ—Å —Å—Ç–∞–≤–∫–∏
    }
    updatePlayerGoldDisplay();

    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∑–∞ —Ä–∞—É–Ω–¥
    processRoundExperience();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ–π—Ü–æ–≤ (–æ–±–∏–¥—ã, –æ–±—É—á–µ–Ω–∏–µ, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –æ–ø—ã—Ç)
    currentFighters.forEach(cf => {
        const fData = fightersInitialData.find(f => f.id === cf.id);
        if (fData && fData.combatStats) {
            fData.combatStats.learnedGrudges = deepCopy(cf.combatStats.learnedGrudges || {});
            fData.combatStats.learning = deepCopy(cf.combatStats.learning || {});
            fData.combatStats.intellect = deepCopy(cf.combatStats.intellect || {});
            fData.combatStats.experience = deepCopy(cf.combatStats.experience || {});
        }
    });

    // –°–Ω–∏–º–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—É–Ω–¥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (activeRoundModifier && activeRoundModifier.remove) {
         // –ü—Ä–∏–º–µ–Ω—è–µ–º remove –∫–æ –≤—Å–µ–º *–∏—Å—Ö–æ–¥–Ω—ã–º* –¥–∞–Ω–Ω—ã–º –±–æ–π—Ü–æ–≤, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö –≤ —Ä–∞—É–Ω–¥–µ
         // —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—É–Ω–¥–æ–º
         const participatingIds = currentFighters.map(f => f.id);
         fightersInitialData.forEach(fInitialData => {
             if (participatingIds.includes(fInitialData.id)) {
                 // –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –∏–Ω—Å—Ç–∞–Ω—Å –∏–∑ currentFighters
                 activeRoundModifier.remove(fInitialData);
             }
         });
    }
    activeRoundModifier = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä

    updateScoreboard(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –ø–æ–±–µ–¥–∞–º–∏ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å defeated –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    currentFighters.forEach(f => {
        if (!f.alive && f.element && !f.element.classList.contains('defeated')) {
            f.element.classList.add('defeated');
            f.element.classList.remove('breathing');
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    if (isGameOver) {
         console.log("endRound: Game is over, not scheduling next round.");
         if(startButtonEl) startButtonEl.textContent = "–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
         // –ö–Ω–æ–ø–∫–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å disabled
         return;
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
    logMessage(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É ${roundCounter + 1}...`, "log-round-start");
    preRoundTimeoutId = setTimeout(() => {
        if (isGameOver) return; // –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        console.log("endRound: Scheduling setupNewRound(true) via setTimeout.");
        setupNewRound(true); // true –¥–ª—è isContinuation (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã)
    }, NEW_ROUND_DELAY);
     console.log(`endRound: Scheduled next round setup with timeout ID: ${preRoundTimeoutId}`);
}


/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã.
 * @param {boolean} [isContinuation=false] - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ (–Ω–µ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞).
 * @param {boolean} [isManualRestart=false] - –ë—ã–ª –ª–∏ —Ä–∞—É–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é (–Ω–µ –Ω–∞—á–∏—Å–ª—è—Ç—å –∑–æ–ª–æ—Ç–æ –∑–∞ —Ä–∞—É–Ω–¥, —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ game over).
 */
function setupNewRound(isContinuation = false, isManualRestart = false) {
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –∏ —ç—Ç–æ –Ω–µ —Ä—É—á–Ω–æ–π —Ä–µ—Å—Ç–∞—Ä—Ç, –≤—ã—Ö–æ–¥–∏–º
    if (isGameOver && !isManualRestart) {
        console.log("setupNewRound: Game is over and not a manual restart. Exiting.");
        return;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—á–Ω–æ–π —Ä–µ—Å—Ç–∞—Ä—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if (isManualRestart) {
        isGameOver = false;
        console.log("setupNewRound: Manual restart, isGameOver reset to false.");
    }

    console.log("--- Starting setupNewRound --- isContinuation:", isContinuation, "isManualRestart:", isManualRestart);

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—É–Ω–¥–∞
    roundInProgress = false;
    if (gameLoopInterval) { clearInterval(gameLoopInterval); gameLoopInterval = null; }
    if (preRoundTimeoutId) { clearTimeout(preRoundTimeoutId); preRoundTimeoutId = null; }

    // –û—á–∏—Å—Ç–∫–∞ –∞—Ä–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–∞
    if (arenaEl) arenaEl.innerHTML = '';
    clearOrbitalEffects();
    arenaBonuses.forEach(b => { if (b.element?.parentElement) b.element.remove(); });
    arenaBonuses = [];
    currentFighters = [];
    duelContenders = null;
    activeRoundModifier = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–¥–µ—Å—å
    intelliActionLog = {};
    defeatedFightersOrder = [];
    createFighterInstanceNamespace.commonWeaponThisRound = null; // –°–±—Ä–æ—Å –æ–±—â–µ–≥–æ –æ—Ä—É–∂–∏—è
    lastDamageTimestamp = Date.now(); // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    userScrolledLog = false; // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —Å–∫—Ä–æ–ª–ª–∞ –ª–æ–≥–∞
    if (scrollLogDownButtonEl) scrollLogDownButtonEl.style.opacity = '0'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫—Ä–æ–ª–ª–∞

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞ (–∫—Ä–æ–º–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞)
    if (!isManualRestart) {
        playerGold += GOLD_PER_ROUND_BONUS;
    }
    currentBet = { fighterId: null, amount: 0, placed: false }; // –°–±—Ä–æ—Å —Å—Ç–∞–≤–∫–∏
    isBettingPaused = false; // –°–±—Ä–æ—Å –ø–∞—É–∑—ã –¥–ª—è —Å—Ç–∞–≤–æ–∫
    updatePlayerGoldDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞

    // –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    if (bettingModalEl) bettingModalEl.style.display = 'none';
    if (gameOverOverlayEl) gameOverOverlayEl.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º Game Over –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if (guideModal) guideModal.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
    isGuideOpen = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    gameWasPausedByGuide = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞—É–∑—ã –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–∞—É–Ω–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä—É—á–Ω–æ–π —Ä–µ—Å—Ç–∞—Ä—Ç)
    if (!isManualRestart) {
        if (!isContinuation) { // –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            roundCounter = 1;
        } else { // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
            roundCounter++;
        }
    } // –ü—Ä–∏ —Ä—É—á–Ω–æ–º —Ä–µ—Å—Ç–∞—Ä—Ç–µ roundCounter –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    document.title = `–ê—Ä–µ–Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: –†–∞—É–Ω–¥ ${roundCounter}`;
    if (h1TitleEl) h1TitleEl.textContent = `–ê—Ä–µ–Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: –†–∞—É–Ω–¥ ${roundCounter}`;

    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ/—Ä–µ—Å—Ç–∞—Ä—Ç)
    if ((!isContinuation || battleLogEl.children.length === 0) && !isManualRestart && battleLogEl) {
        battleLogEl.innerHTML = '';
    }
    logMessage(`‚öîÔ∏è –†–∞—É–Ω–¥ ${roundCounter} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ë–æ–π—Ü—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è...`, "log-round-start");

    // –í—ã–±–æ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∞—É–Ω–¥–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥)
    activeRoundModifier = null; // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (roundCounter > 1 && Math.random() < MODIFIER_CHANCE_PER_ROUND) {
        activeRoundModifier = roundModifiers[getRandomInt(0, roundModifiers.length - 1)];
        logMessage(`üîÆ –ú–û–î–ò–§–ò–ö–ê–¢–û–† –†–ê–£–ù–î–ê: <span class="log-modifier">${activeRoundModifier.name}</span>`, "log-modifier");
        logMessage(`<i>${activeRoundModifier.description}</i>`, "log-modifier");
    }

    // –õ–æ–≥ –¥–ª—è —Å–ø–µ—Ü-—Ä–∞—É–Ω–¥–∞
    if (roundCounter > 0 && roundCounter % 5 === 0) {
        logMessage("üí• <span class='log-winner'>–°–ø–µ—Ü-—Ä–∞—É–Ω–¥! –í—Å–µ –±–æ–π—Ü—ã –ø–æ–ª—É—á–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ!</span>", "log-winner");
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const participatingFightersData = fightersInitialData.filter(fData => fData.participating);
    if (participatingFightersData.length < 2) {
        logMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–π—Ü–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2). –û—Ç–º–µ—Ç—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ.", "log-kill");
        if(startButtonEl) {
            startButtonEl.textContent = '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –±–æ–π—Ü–æ–≤!';
            startButtonEl.disabled = false;
        }
        if(restartRoundButtonEl) restartRoundButtonEl.style.display = 'none';
        firstRoundStarted = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –±–æ–π—Ü–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–∞, –µ—Å–ª–∏ –æ–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –∑—Ä—è
        if (!isManualRestart && isContinuation) roundCounter--;
        document.title = `–ê—Ä–µ–Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤`;
        if (h1TitleEl) h1TitleEl.textContent = `–ê—Ä–µ–Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤`;
        return; // –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —Ä–∞—É–Ω–¥ –Ω–µ –Ω–∞—á–Ω–µ—Ç—Å—è
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –±–æ–π—Ü–æ–≤ –¥–ª—è —Ä–∞—É–Ω–¥–∞
    currentFighters = participatingFightersData.map(data => createFighterInstance(data));

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫ –∏–Ω—Å—Ç–∞–Ω—Å–∞–º –±–æ–π—Ü–æ–≤
    if (activeRoundModifier && activeRoundModifier.apply) {
        currentFighters.forEach(f => {
            if (f) activeRoundModifier.apply(f); // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –±–æ–π—Ü—É
        });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞–≤–æ–∫
    const allFightersAreActuallyParticipating = fightersInitialData.length === participatingFightersData.length && fightersInitialData.every(f => f.participating);
    if (placeBetButtonEl) {
        if (allFightersAreActuallyParticipating && currentFighters.length >= 2) {
            placeBetButtonEl.style.display = 'block';
            logMessage("üí∞ –î–æ—Å—Ç—É–ø–Ω—ã —Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥! (–í—Å–µ –±–æ–π—Ü—ã —É—á–∞—Å—Ç–≤—É—é—Ç)", "log-bonus");
        } else {
            placeBetButtonEl.style.display = 'none';
            if (!allFightersAreActuallyParticipating && currentFighters.length >= 2) logMessage("–°—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: –Ω–µ –≤—Å–µ –±–æ–π—Ü—ã —É—á–∞—Å—Ç–≤—É—é—Ç.", "log-effect");
            else if (currentFighters.length < 2) logMessage("–°—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–π—Ü–æ–≤.", "log-effect");
        }
    }

    // –õ–æ–≥ –æ –±–æ–π—Ü–µ —Å –≤—ã—Å–æ–∫–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
    if (currentFighters.length > 0) {
        const highestIntellectFighter = currentFighters.reduce((prev, current) => getTotalIntellect(prev) > getTotalIntellect(current) ? prev : current, currentFighters[0]);
        if (highestIntellectFighter && getTotalIntellect(highestIntellectFighter) >= 10) {
            let intellectSummary = `(${INTELLECT_SYMBOLS.tactical}${highestIntellectFighter.combatStats.intellect.tactical} ${INTELLECT_SYMBOLS.defense}${highestIntellectFighter.combatStats.intellect.defense} ${INTELLECT_SYMBOLS.resource}${highestIntellectFighter.combatStats.intellect.resource} ${INTELLECT_SYMBOLS.spatial}${highestIntellectFighter.combatStats.intellect.spatial})`;
            logMessage(`üß† <span class="log-winner">${highestIntellectFighter.name}</span> –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º ${intellectSummary}!`, "log-winner");
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä—É–∂–∏–∏ –≤ –æ–≤–µ—Ä–ª–µ–µ
    if (weaponInfoListEl) weaponInfoListEl.innerHTML = '';
    currentFighters.forEach(fighter => {
        createFighterElement(fighter); // –°–æ–∑–¥–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç –±–æ–π—Ü–∞
        if (weaponInfoListEl) {
            const li = document.createElement('li');
            let intellectInfo = "";
            const totalInt = getTotalIntellect(fighter);
             if (totalInt > 4) {
                intellectInfo = `<span class="fighter-intellect-info">(`;
                if (fighter.combatStats.intellect.tactical > 1) intellectInfo += `<span class="int-tactical">${INTELLECT_SYMBOLS.tactical}${fighter.combatStats.intellect.tactical}</span>`;
                if (fighter.combatStats.intellect.defense > 1) intellectInfo += `<span class="int-defense">${INTELLECT_SYMBOLS.defense}${fighter.combatStats.intellect.defense}</span>`;
                if (fighter.combatStats.intellect.resource > 1) intellectInfo += `<span class="int-resource">${INTELLECT_SYMBOLS.resource}${fighter.combatStats.intellect.resource}</span>`;
                if (fighter.combatStats.intellect.spatial > 1) intellectInfo += `<span class="int-spatial">${INTELLECT_SYMBOLS.spatial}${fighter.combatStats.intellect.spatial}</span>`;
                intellectInfo += `)</span>`;
            }
            li.innerHTML = `<span class="fighter-name-info">${fighter.name}</span>${intellectInfo} –≤–æ–æ—Ä—É–∂–µ–Ω: <span class="weapon-name-info">${fighter.weapon.name}</span> <span class="weapon-emoji-info">${fighter.weapon.emoji}</span>`;
            weaponInfoListEl.appendChild(li);
        }
    });

    spawnInitialOrbitalEffects(); // –°–æ–∑–¥–∞–µ–º –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä—É–∂–∏–∏
    if (roundInfoOverlayEl) roundInfoOverlayEl.style.display = 'flex';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if(startButtonEl) {
        startButtonEl.textContent = '–†–∞—É–Ω–¥ –ò–¥–µ—Ç...';
        startButtonEl.disabled = true;
    }
    if(restartRoundButtonEl) {
        restartRoundButtonEl.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        restartRoundButtonEl.disabled = false; // –î–µ–ª–∞–µ–º –µ–µ –∞–∫—Ç–∏–≤–Ω–æ–π
    }
    updateScoreboard(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–æ –Ω–∞—á–∞–ª–∞ –±–æ—è (–∏–ª–∏ –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å—Ç–∞–≤–æ–∫)
    preRoundTimeoutId = setTimeout(() => {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ –∏–∑-–∑–∞ —Å—Ç–∞–≤–æ–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (isBettingPaused) {
            console.log("setupNewRound: Betting is paused, not starting round yet.");
            return;
        }
        // –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π
        proceedToRoundStart();
    }, PRE_ROUND_WEAPON_DISPLAY_DURATION);
     console.log(`setupNewRound: Scheduled round start or betting check with timeout ID: ${preRoundTimeoutId}`);
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∞–∑—É —Ä–∞—É–Ω–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–±–æ–µ–≤–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏/—Å—Ç–∞–≤–æ–∫.
 */
function proceedToRoundStart() {
    if(isGameOver || roundInProgress) {
        console.log("proceedToRoundStart: Cannot start, game over or round already in progress.");
        return;
    }
    if (roundInfoOverlayEl) roundInfoOverlayEl.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π —Å –æ—Ä—É–∂–∏–µ–º
    if (bettingModalEl) bettingModalEl.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å—Ç–∞–≤–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    logMessage("–ë–û–ô –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!", "log-round-start");
    roundInProgress = true;
    lastDamageTimestamp = Date.now(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    userScrolledLog = false;
    updateScoreboard(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è

    console.log("proceedToRoundStart: Checking functions before setInterval...");
    console.log(" - typeof gameTick:", typeof gameTick);

    if (typeof gameTick !== 'function') {
        console.error("CRITICAL: gameTick is not defined before setInterval!");
        // –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
        if(startButtonEl) { startButtonEl.textContent = "–û—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å?"; startButtonEl.disabled = false; }
        if(restartRoundButtonEl) restartRoundButtonEl.style.display = 'none';
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    gameLoopInterval = setInterval(gameTick, GAME_SPEED);
    console.log(`proceedToRoundStart: Started game loop with interval ID: ${gameLoopInterval}`);
}

/**
 * –û–¥–∏–Ω –∏–≥—Ä–æ–≤–æ–π —Ç–∏–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã).
 */
function gameTick() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–∫, –µ—Å–ª–∏ —Ä–∞—É–Ω–¥ –Ω–µ –∏–¥–µ—Ç, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
    if (!roundInProgress || isGameOver || isGuideOpen) {
        if (gameLoopInterval && !isGuideOpen) { // –ù–µ —á–∏—Å—Ç–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –ø–∞—É–∑–∞ –∏–∑-–∑–∞ –≥–∞–π–¥–∞ (–æ–Ω —Å–∞–º –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª)
             console.warn("gameTick: Called while round not in progress or game over. Clearing interval.");
             clearInterval(gameLoopInterval);
             gameLoopInterval = null;
        }
        return;
    }

    intelliActionLog = {}; // –°–±—Ä–æ—Å –ª–æ–≥–∞ –¥–µ–π—Å—Ç–≤–∏–π –ò–ò –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫
    const aliveFighters = currentFighters.filter(f => f.alive);

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–π–¥ –Ω–µ –æ—Ç–∫—Ä—ã—Ç!) ---
    if (!isGuideOpen && Date.now() - lastDamageTimestamp > STALL_TIMEOUT && aliveFighters.length > 1 && !duelContenders) {
        logMessage("‚è≥ <span class='log-stall-restart'>–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∞—Ä–µ–Ω–µ –±–æ–ª–µ–µ " + (STALL_TIMEOUT / 1000) + " —Å–µ–∫—É–Ω–¥! –†–∞—É–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...</span>", "log-stall-restart");
        endRound(true); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–∑-–∑–∞ –∑–∞—Å—Ç–æ—è
        return; // –í—ã—Ö–æ–¥ –∏–∑ —Ç–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ endRound
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ ---


    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ ---
    if (aliveFighters.length <= 1) {
        console.log(`gameTick: Ending round because alive fighters count is ${aliveFighters.length}. Calling endRound(false)...`);
        endRound(false); // –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
        return; // –í—ã—Ö–æ–¥ –∏–∑ —Ç–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ endRound
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ ---


    // --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–µ–π—Å—Ç–≤–∏–π –±–æ–π—Ü–æ–≤ ---
    aliveFighters.forEach(fighter => {
        if (!fighter.alive) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ä—Ç–≤—ã—Ö

        fighter.ticksSurvivedThisRound++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–∂–∏–≤–∞–Ω–∏—è

        // –£–º–µ–Ω—å—à–∞–µ–º –∫—É–ª–¥–∞—É–Ω –¥–µ–π—Å—Ç–≤–∏—è
        if (fighter.actionCooldown > 0) {
            fighter.actionCooldown--;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (—è–¥, –≥–æ—Ä–µ–Ω–∏–µ, —Ä–µ–≥–µ–Ω –∏ —Ç.–¥.)
        if (typeof processStatusEffects === 'function') {
            processStatusEffects(fighter);
        } else {
             console.error("gameTick: processStatusEffects is not defined!");
             // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∞–≤–∏–Ω—ã –æ—à–∏–±–æ–∫
             clearInterval(gameLoopInterval); gameLoopInterval = null; return;
        }


        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–∫–æ–≤—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞—É–Ω–¥–∞
        if (activeRoundModifier?.applyTick) {
            activeRoundModifier.applyTick(fighter);
        }

        // –í—ã–±–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –±–æ–µ—Ü –≥–æ—Ç–æ–≤ –∏ –Ω–µ –≤ —Å—Ç–∞–Ω–µ
        if (fighter.alive && fighter.actionCooldown <= 0 && !fighter.statusEffects?.stun) {
             if (typeof chooseAction === 'function' && typeof executeAction === 'function') {
                 chooseAction(fighter, aliveFighters, arenaBonuses);
                 executeAction(fighter);
             } else {
                  console.error("gameTick: chooseAction or executeAction is not defined!");
                  clearInterval(gameLoopInterval); gameLoopInterval = null; return;
             }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞ –±–æ–π—Ü–∞ (–ø–æ–∑–∏—Ü–∏—è, —Ö–ø, –±—Ä–æ–Ω—è, —Å—Ç–∞—Ç—É—Å—ã)
        updateFighterElement(fighter);
    });
    // --- –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π –±–æ–π—Ü–æ–≤ ---


    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏ –∏ –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ ---
    manageArenaBonuses(); // –°–ø–∞–≤–Ω –±–æ–Ω—É—Å–æ–≤
    updateOrbitalEffectsPosition(); // –î–≤–∏–∂–µ–Ω–∏–µ –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    // --- –ö–æ–Ω–µ—Ü —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞–º–∏ –∏ –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ ---


    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∞–ª–æ –¥—É—ç–ª–∏ ---
    if (!duelContenders && aliveFighters.length === 2) {
        duelContenders = [...aliveFighters];
        logMessage(`‚öîÔ∏è <span class="log-duel">–î–£–≠–õ–¨!</span> ${duelContenders[0].name} –ø—Ä–æ—Ç–∏–≤ ${duelContenders[1].name}!`, "log-duel");
        duelContenders.forEach(f => {
            addExperience(f, 'target_priority_success'); // –û–ø—ã—Ç –∑–∞ –≤—ã—Ö–æ–¥ –≤ —Ñ–∏–Ω–∞–ª
            if(getTotalIntellect(f) >= 8) logIntellectAction(f, 'tactical', `–≤—Å—Ç—É–ø–∞–µ—Ç –≤ –¥—É—ç–ª—å!`);
        });
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –¥—É—ç–ª–∏ (–µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –¥—É—ç–ª—è–Ω—Ç–æ–≤ –≤—ã–±—ã–ª)
     else if (duelContenders) {
         const [fighter1, fighter2] = duelContenders;
         if (!fighter1.alive || !fighter2.alive) {
             const duelWinner = fighter1.alive ? fighter1 : (fighter2.alive ? fighter2 : null);
             const duelLoser = fighter1.alive ? fighter2 : fighter1;
             if (duelWinner) {
                 logMessage(`üëë <span class="log-winner">${duelWinner.name}</span> –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ –¥—É—ç–ª–∏ –ø—Ä–æ—Ç–∏–≤ ${duelLoser.name}!`, "log-winner");
                 addExperience(duelWinner, 'defeat_dangerous_enemy'); // –î–æ–ø. –æ–ø—ã—Ç –∑–∞ –ø–æ–±–µ–¥—É –≤ –¥—É—ç–ª–∏
                 if (getTotalIntellect(duelWinner) >= 10) logIntellectAction(duelWinner, 'tactical', `–≤—ã–∏–≥—Ä–∞–ª –¥—É—ç–ª—å!`);
             } else {
                 // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –µ—Å–ª–∏ –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                 logMessage(`üíî –î—É—ç–ª—å –º–µ–∂–¥—É ${fighter1.name} –∏ ${fighter2.name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.`, "log-winner");
             }
             duelContenders = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—É—ç–ª—å
         }
     }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É—ç–ª–∏ ---
}